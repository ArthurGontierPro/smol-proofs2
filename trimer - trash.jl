
function smolproof(system,invsys,systemlink)
    isassi,assi = initassignement(invsys)
    antecedants = Set(Int[])
    cone = Set(Int[])
    front = Set(Int[length(system)-1])
    while length(front)>0
        id = pop!(front)
        if isassigned(systemlink,id)
            antecedants = systemlink[id]
        else
            isassi .= false
            assi .= false
            antecedants = unitpropag(system,invsys,id,isassi,assi)
            # antecedants = findall(unitpropag2(system,invsys,id,isassi,assi))
        end
        for i in antecedants
            if !(i in cone)
                push!(cone,i)
                push!(front,i)
            end
        end
    end
    return cone
end


function unitpropag2(system,invsys,init,isassi,assi) 
    n = length(system)
    front = zeros(Bool,n)
    front[init] = true
    antecedants = zeros(Bool,n)
    id = init
    eq = system[init]
    s = 0
    while true in front
        id = findfirst(front)
        front[id] = false
        eq = id==init ? reverse(system[id]) : system[id]
        s = slack(eq,isassi,assi)
        if s<0
            antecedants[id]=true
            return antecedants
        else
            for l in eq.t
                if !isassi[l.var.x+1,l.var.v+1] && l.coef > s
                    isassi[l.var.x+1,l.var.v+1] = true
                    assi[l.var.x+1,l.var.v+1] = l.sign
                    antecedants[id] = true
                    for j in invsys[l.var]
                        if j!=id
                            front[j] = true
                        end
                    end
                end
            end
        end
    end
    return antecedants
end
function makesmol(system,invsys,systemlink)
    normcoefsystem(system)
    # printsys(system)
    cone = @time smolproof2(system,invsys,systemlink)
    println(sum(cone),"/",length(system))
    # printsys(system,cone)
    
    cone = @time smolproof(system,invsys,systemlink)
    println(length(cone),"/",length(system))
    # printsys(system,cone)

end
# rup stop at first contradiction
c = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 277, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 290, 292, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 365, 367, 368, 372, 373, 377, 378, 379, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 417, 418, 419, 420, 422, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 472, 473, 477, 482, 483, 484, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 507, 508, 512, 513, 514, 515, 517, 518, 519, 520, 522, 523, 524, 525, 527, 528, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 562, 563, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 587, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 672, 673, 674, 675, 676, 677, 678, 682, 683, 684, 685, 687, 692, 697, 698, 702, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 737, 738, 742, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 807, 812, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 847, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 912, 913, 914, 915, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 973, 974, 975, 977, 978, 979, 980, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1027, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1137, 1138, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1282, 1283, 1284, 1285, 1287, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1342, 1343, 1344, 1345, 1347, 1359, 1367, 1368, 1376, 1383, 1384, 1385, 1393, 1401, 1417, 1418, 1419, 1427, 1435, 1436, 1443, 1444, 1452, 1453, 1461, 1469, 1470, 1477, 1478, 1485, 1486, 1487, 1495, 1503, 1504, 1512, 1520, 1521, 1522, 1538, 1539, 1546, 1574, 1580, 1585, 1586, 1600, 1612, 1618, 1621, 1625, 1633, 1634, 1642, 1650, 1651, 1659, 1697, 1698, 1706, 1744, 1745, 1746, 1754, 1762, 1763, 1771, 1784, 1807, 1808, 1810, 1818, 1824, 1825, 1836, 1845, 1848, 1849, 1853, 1854, 1856, 1857, 1858, 1866, 1875, 1883, 1921, 1922, 1930, 1937, 1943, 1965, 1966, 1969, 1970, 1987, 2033, 2034, 2081, 2082, 2154, 2161, 2176, 2188, 2189, 2190, 2191, 2193, 2201, 2210, 2211, 2219, 2257, 2258, 2265, 2273, 2279, 2284, 2288, 2301, 2303, 2304, 2305, 2323, 2370, 2416, 2417, 2418, 2426, 2434, 2435, 2443, 2450, 2456, 2479, 2482, 2489, 2494, 2500, 2504, 2516, 2518, 2519, 2520, 2528, 2529, 2530, 2537, 2538, 2546, 2547, 2555, 2594, 2602, 2609, 2640, 2641, 2642]
# full rup
c2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 290, 292, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 365, 367, 368, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 417, 418, 419, 420, 422, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 483, 484, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 507, 508, 512, 513, 514, 515, 517, 518, 519, 520, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 702, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 952, 953, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1137, 1138, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1358, 1359, 1366, 1367, 1368, 1375, 1376, 1383, 1384, 1385, 1392, 1393, 1400, 1401, 1402, 1409, 1410, 1417, 1418, 1419, 1426, 1427, 1434, 1435, 1436, 1443, 1444, 1451, 1452, 1453, 1460, 1461, 1468, 1469, 1470, 1477, 1478, 1485, 1486, 1487, 1494, 1495, 1502, 1503, 1504, 1511, 1512, 1519, 1520, 1521, 1522, 1529, 1530, 1537, 1538, 1539, 1546, 1547, 1553, 1554, 1559, 1560, 1564, 1565, 1568, 1569, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1593, 1594, 1600, 1601, 1606, 1607, 1611, 1612, 1615, 1616, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1641, 1642, 1649, 1650, 1651, 1658, 1659, 1665, 1666, 1671, 1672, 1676, 1677, 1680, 1681, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1705, 1706, 1712, 1713, 1718, 1719, 1723, 1724, 1727, 1728, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1753, 1754, 1761, 1762, 1763, 1770, 1771, 1777, 1778, 1783, 1784, 1788, 1789, 1792, 1793, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1817, 1818, 1824, 1825, 1830, 1831, 1835, 1836, 1839, 1840, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1865, 1866, 1873, 1874, 1875, 1882, 1883, 1889, 1890, 1895, 1896, 1900, 1901, 1904, 1905, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1929, 1930, 1936, 1937, 1942, 1943, 1947, 1948, 1951, 1952, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1977, 1978, 1985, 1986, 1987, 1994, 1995, 2001, 2002, 2007, 2008, 2012, 2013, 2016, 2017, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2041, 2042, 2048, 2049, 2054, 2055, 2059, 2060, 2063, 2064, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2089, 2090, 2097, 2098, 2099, 2106, 2107, 2113, 2114, 2119, 2120, 2124, 2125, 2128, 2129, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2153, 2154, 2160, 2161, 2166, 2167, 2171, 2172, 2175, 2176, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2201, 2202, 2209, 2210, 2211, 2218, 2219, 2225, 2226, 2231, 2232, 2236, 2237, 2240, 2241, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2265, 2266, 2272, 2273, 2278, 2279, 2283, 2284, 2287, 2288, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2313, 2314, 2321, 2322, 2323, 2330, 2331, 2337, 2338, 2343, 2344, 2348, 2349, 2352, 2353, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2377, 2378, 2384, 2385, 2390, 2391, 2395, 2396, 2399, 2400, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2425, 2426, 2433, 2434, 2435, 2442, 2443, 2449, 2450, 2455, 2456, 2460, 2461, 2464, 2465, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2488, 2489, 2494, 2495, 2499, 2500, 2503, 2504, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2527, 2528, 2529, 2530, 2537, 2538, 2545, 2546, 2547, 2554, 2555, 2561, 2562, 2567, 2568, 2572, 2573, 2576, 2577, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2601, 2602, 2608, 2609, 2614, 2615, 2619, 2620, 2623, 2624, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642]
# no rup in opb
c3 = [2, 3, 4, 6, 10, 12, 14, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 268, 269, 270, 271, 297, 298, 299, 300, 307, 308, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 327, 328, 329, 330, 331, 337, 338, 339, 340, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 364, 365, 392, 393, 394, 395, 396, 402, 403, 404, 405, 406, 417, 418, 419, 420, 427, 428, 429, 430, 431, 442, 443, 444, 445, 446, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 487, 488, 489, 490, 492, 493, 494, 495, 496, 502, 503, 504, 505, 512, 513, 514, 515, 517, 518, 519, 520, 522, 523, 524, 525, 532, 533, 534, 535, 537, 538, 539, 540, 547, 548, 549, 550, 551, 552, 553, 554, 555, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 597, 598, 599, 600, 601, 607, 608, 609, 610, 612, 613, 614, 615, 616, 622, 623, 624, 625, 626, 632, 633, 634, 635, 636, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 672, 673, 674, 675, 676, 677, 678, 707, 757, 758, 759, 760, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 782, 783, 784, 785, 786, 787, 792, 793, 794, 795, 822, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 852, 853, 854, 855, 856, 872, 873, 874, 875, 876, 907, 908, 912, 913, 914, 915, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 973, 974, 975, 977, 978, 979, 980, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1072, 1073, 1074, 1075, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1132, 1133, 1134, 1135, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1162, 1163, 1164, 1165, 1166, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1257, 1258, 1259, 1260, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1322, 1323, 1324, 1325, 1359, 1367, 1368, 1376, 1383, 1384, 1385, 1393, 1401, 1417, 1418, 1419, 1427, 1435, 1436, 1443, 1444, 1452, 1453, 1461, 1469, 1470, 1477, 1478, 1485, 1486, 1487, 1495, 1503, 1504, 1512, 1520, 1521, 1522, 1538, 1539, 1546, 1574, 1580, 1585, 1600, 1612, 1618, 1621, 1625, 1633, 1634, 1642, 1650, 1651, 1659, 1697, 1698, 1706, 1744, 1745, 1746, 1754, 1762, 1763, 1771, 1784, 1807, 1808, 1810, 1818, 1824, 1825, 1836, 1845, 1848, 1849, 1853, 1854, 1856, 1857, 1858, 1866, 1875, 1883, 1921, 1922, 1930, 1937, 1943, 1965, 1966, 1969, 1970, 1987, 2033, 2034, 2081, 2082, 2154, 2161, 2176, 2188, 2189, 2190, 2191, 2193, 2201, 2210, 2211, 2219, 2257, 2258, 2265, 2273, 2279, 2284, 2288, 2301, 2303, 2304, 2305, 2323, 2370, 2416, 2417, 2418, 2426, 2434, 2435, 2443, 2450, 2456, 2479, 2482, 2537, 2538, 2546, 2547, 2555, 2594, 2602, 2609, 2640, 2641, 2642]
v = [1358,1366,1375,1383,1392,1400,1409,1417,1426,1434,1443,1451,1460,1468,1477,1485,1494,1502,1511,1519,1529,1537,1546,1553,1559,1564,1568,1571,1573,1575,1577,1593,1600,1606,1611,1615,1618,1620,1622,1624,1641,1649,1658,1665,1671,1676,1680,1683,1685,1687,1689,1705,1712,1718,1723,1727,1730,1732,1734,1736,1753,1761,1770,1777,1783,1788,1792,1795,1797,1799,1801,1817,1824,1830,1835,1839,1842,1844,1846,1848,1865,1873,1882,1889,1895,1900,1904,1907,1909,1911,1913,1929,1936,1942,1947,1951,1954,1956,1958,1960,1977,1985,1994,2001,2007,2012,2016,2019,2021,2023,2025,2041,2048,2054,2059,2063,2066,2068,2070,2072,2089,2097,2106,2113,2119,2124,2128,2131,2133,2135,2137,2153,2160,2166,2171,2175,2178,2180,2182,2184,2201,2209,2218,2225,2231,2236,2240,2243,2245,2247,2249,2265,2272,2278,2283,2287,2290,2292,2294,2296,2313,2321,2330,2337,2343,2348,2352,2355,2357,2359,2361,2377,2384,2390,2395,2399,2402,2404,2406,2408,2425,2433,2442,2449,2455,2460,2464,2467,2469,2471,2473,2488,2494,2499,2503,2506,2508,2510,2512,2527,2537,2545,2554,2561,2567,2572,2576,2579,2581,2583,2585,2601,2608,2614,2619,2623,2626,2628,2630,2632]
for vv in v
    println(vv," ",vv in c2)
end

function smolproof2(system,invsys,systemlink,nbopb)
    isassi,assi = initassignement(invsys)
    front = getfront(system,invsys,isassi,assi,nbopb) #println("front:",findall(front))
    cone = copy(front)
    cone[end] = true
    antecedants = Set(Int[])
    while true in front
        id = findlast(front)
        front[id] = false
        if id>nbopb
            if isassigned(systemlink,id)
                antecedants=systemlink[id]
            else
                isassi .= false
                assi .= false
                antecedants = findall(revunitpropag(system,invsys,id,isassi,assi))
            end
            for i in antecedants
                if !cone[i]
                    cone[i]=true
                    front[i]=true
                end
            end
        end
    end
    cone[end] = true
    return cone
end

function getfront(system,invsys,isassi,assi,nbopb)
    n = length(system)
    antecedants = zeros(Bool,n)
    front = zeros(Bool,n)
    isassif,assif = initassignement(invsys)
    for i in eachindex(system)
        eq = system[i]
        s = slack(eq,isassif,assif)
        if s<0 println("solocontradiction ") end
        for l in eq.t 
            if l.coef > s
                printeq(eq)
                reset([front,antecedants,isassi,assi])
                x,v = l.var.x+1,l.var.v+1
                assi[x,v] = l.sign
                isassi[x,v] = true 
                front[i] = antecedants[i] = true
                for j in invsys[l.var]          
                    if j!=i
                        front[j] = true
                    end 
                end
                if unitpropag(front,antecedants,system,invsys,isassi,assi)
                    println(sum(antecedants))
                end
            end
        end
    end
    reset([antecedants])
    updumb(system,invsys,antecedants)
    return antecedants
end
function revunitpropag(system,invsys,init,isassi,assi) 
    n = length(system)
    front = zeros(Bool,n)
    front[init] = true
    antecedants = zeros(Bool,n)
    id = init
    eq = system[init]
    s = 0
    while true in front
        id = findlast(front)
        front[id] = false
        eq = id==init ? reverse(system[id]) : system[id]
        s = slack(eq,isassi,assi)
        if s<0
            antecedants[id] = true
            return antecedants
        else
            for l in eq.t
                if !isassi[l.var.x+1,l.var.v+1] && l.coef > s
                    isassi[l.var.x+1,l.var.v+1] = true
                    assi[l.var.x+1,l.var.v+1] = l.sign
                    antecedants[id] = true
                    for j in invsys[l.var]
                        if j!=id
                            front[j] = true
                        end
                    end
                end
            end
        end
    end
    println("\nRUP Failed from:",init)
    # println(findall(antecedants))
    return antecedants
end
function findassigned(front,antecedants,system,invsys,isassi,assi)
    for i in eachindex(system)
        eq = system[i]
        if length(eq.t)==1
            s = slack(eq,isassi,assi)
            if s>=0
                l = eq.t[1]
                if l.coef > s
                    x,v = l.var.x+1,l.var.v+1
                    assi[x,v] = l.sign
                    isassi[x,v] = true 
                    front[i] = antecedants[i] = true
                    for j in invsys[l.var]          
                        if j!=i
                            front[j] = true
                        end 
                    end
                end
            else
                println("contradicting litteral")
            end
        end
    end
end

function smolproof3(system,invsys,systemlink,nbopb)
    isassi,assi = initassignement(invsys)
    cone = zeros(Bool,length(system))
    cone[end] = true
    antecedants = zeros(Bool,length(system))
    front = zeros(Bool,length(system))
    updumb(system,invsys,front)
    while true in front
        id = findlast(front)
        front[id] = false
        if id>nbopb
            if isassigned(systemlink,id)
                for i in systemlink[id]
                    antecedants[i] = true
                end
            else
                rupdumb(system,invsys,antecedants,id,isassi,assi)
            end
            for i in findall(antecedants)
                if !cone[i]
                    cone[i]=true
                    front[i]=true
                end
            end
            
        end
    end
    cone[end] = true
    return cone
end
# system : array of equations
# invsys : dictonary mapping each variable to all the eqation indexesit is in
# init : first equation to propagate
# isassi : record of assigned variables
# assi : value of assignements
# nbopb : number of opb equations
function unitpropag(front,antecedants,system,invsys,isassi,assi)
    id = s = x = v = 0
    eq = system[end]
    while true in front
        id = findlast(front)
        front[id] = false
        eq = system[id]
        s = slack(eq,isassi,assi)
        if s<0                                      # contradiction
            antecedants[id] = true
            return true
        else
            for l in eq.t
                x,v = l.var.x+1,l.var.v+1
                if !isassi[x,v] && l.coef > s       # assign variable
                    isassi[x,v] = true
                    assi[x,v] = l.sign
                    antecedants[id] = true
                    for j in invsys[l.var]          # add impacted equations in front
                        if j!=id
                            front[j] = true
                        end end end end end 
    end
    println("\nUP Failed")
    return false
end


# using Profile
# using ProfileView
# ProfileView.@profile main()
# ProfileView.view()

#= 
g2-g3
        97 %    (7/230)
        99 %    (16/2301)
g2-g5
        98 %    (5/251)
        99 %    (31/2392)
g3-g6
        59 %    (249/609)
        92 %    (453/5952)
g4-g10
        80 %    (762/3751)
        1 %    (161/162)
g4-g14
        23 %    (3507/4570)
        0 %    (757/758)
g4-g33
        52 %    (4466/9211)
        0 %    (971/972)
g5-g6
        9 %    (731/801)
        86 %    (3459/25289)
g7-g11
        90 %    (864/8482)
        1 %    (165/166)



    sid = [1410,438,592,157,159,590,62,891,124,393]
==========================
threads available:10
g2-g3:1151/2531
g2-g5:1210/2643
g4-g14:4384/5328
g3-g6:5292/6561
g4-g10:3731/3913
g8-g9:4318/5407
g5-g6:16027/26090
g10-g25:5356/14535
g4-g33:10061/10183
g7-g28:14912/20291
g10-g14:7771/9430
g7-g15:8899/10912
g7-g11:8622/8648
g11-g13:9714/12357
g11-g28:17590/24059
g17-g25:7392/19381
g7-g23:16385/16653
 . . . 
 
==========================
g2-g3:
  0.015955 seconds (7.45 k allocations: 1.010 MiB)
  0.112484 seconds (200.47 k allocations: 23.322 MiB, 72.17% compilation time)
  0.574211 seconds (12.24 k allocations: 17.901 MiB)
1151/2531
g2-g5:
  0.012458 seconds (8.87 k allocations: 1.188 MiB)
  0.154311 seconds (178.67 k allocations: 31.551 MiB, 42.84% gc time)
  0.944702 seconds (13.41 k allocations: 19.213 MiB)
1210/2643
g3-g6:
  0.016844 seconds (20.48 k allocations: 2.673 MiB)
  0.059255 seconds (373.56 k allocations: 42.712 MiB, 5.60% gc time)
  3.866249 seconds (25.90 k allocations: 107.933 MiB, 0.28% gc time)
5292/6561
g4-g10:
  0.027052 seconds (127.54 k allocations: 16.919 MiB)
  0.020573 seconds (15.10 k allocations: 2.313 MiB)
  3.109376 seconds (148.18 k allocations: 564.057 MiB, 1.27% gc time)
3731/3913
g4-g14:
  0.044422 seconds (164.60 k allocations: 20.567 MiB)
  0.052560 seconds (64.25 k allocations: 9.464 MiB, 8.88% gc time)
  3.697321 seconds (142.81 k allocations: 372.954 MiB, 0.67% gc time)
4384/5328
g4-g33:
  0.095689 seconds (405.20 k allocations: 53.279 MiB, 4.81% gc time)
  0.050947 seconds (108.16 k allocations: 21.007 MiB, 11.53% gc time)
 61.463491 seconds (400.45 k allocations: 1.452 GiB, 0.13% gc time)
10061/10183
g5-g6:
  0.027208 seconds (26.59 k allocations: 3.473 MiB)
  0.355994 seconds (1.52 M allocations: 185.857 MiB, 42.89% gc time)
 14.876507 seconds (35.09 k allocations: 511.352 MiB, 1.04% gc time)
16027/26090
g7-g11:
  0.096185 seconds (353.21 k allocations: 46.271 MiB, 3.97% gc time)
  0.022820 seconds (19.47 k allocations: 4.870 MiB)
 59.304870 seconds (419.86 k allocations: 1.884 GiB, 0.14% gc time)
8622/8648
g7-g15:
  0.060827 seconds (437.18 k allocations: 57.182 MiB, 8.27% gc time)
  0.037761 seconds (79.31 k allocations: 15.907 MiB, 14.69% gc time)
 73.420885 seconds (394.00 k allocations: 1.535 GiB, 0.08% gc time)
8899/10912
g7-g23:
  0.093485 seconds (783.34 k allocations: 102.533 MiB, 9.16% gc time)
  0.050182 seconds (230.07 k allocations: 63.655 MiB, 14.89% gc time)
227.013073 seconds (705.20 k allocations: 5.889 GiB, 0.09% gc time)
16385/16653
g7-g28:
  0.067647 seconds (460.64 k allocations: 54.505 MiB, 4.65% gc time)
  0.026563 seconds (58.88 k allocations: 8.102 MiB)
 58.600608 seconds (637.56 k allocations: 5.279 GiB, 0.58% gc time)
14912/20291
g7-g33:
  0.102984 seconds (895.87 k allocations: 117.412 MiB, 8.72% gc time)
  0.018334 seconds (73.04 k allocations: 19.104 MiB)
887.864739 seconds (1.09 M allocations: 14.379 GiB, 0.04% gc time)
20931/20937
g8-g9:
  0.037838 seconds (156.49 k allocations: 19.754 MiB, 6.14% gc time)
  0.021842 seconds (33.77 k allocations: 4.363 MiB)
 10.019443 seconds (165.15 k allocations: 542.267 MiB, 0.20% gc time)
4318/5407
g10-g14:
  0.096011 seconds (313.64 k allocations: 39.333 MiB, 2.25% gc time)
  0.048104 seconds (66.76 k allocations: 12.383 MiB)
 75.430113 seconds (307.45 k allocations: 1.119 GiB, 0.27% gc time)
7771/9430
g10-g25:
  0.060173 seconds (385.80 k allocations: 46.176 MiB, 3.50% gc time)
  0.035077 seconds (96.54 k allocations: 11.414 MiB, 9.32% gc time)
 26.100259 seconds (238.26 k allocations: 855.204 MiB, 0.13% gc time)
5356/14535
g11-g13:
  0.074360 seconds (465.87 k allocations: 59.605 MiB, 9.29% gc time)
  0.027814 seconds (73.98 k allocations: 15.350 MiB)




veripb --trace --useColor test.opb test.pbp
restart RELP  alt j alt r
union ∪
intersect ∩
setdiff
symdiff rend les elements uniques
issubset ⊆⊇
i belive it matters




=#



function readveripb(path,file,system,invsys,varmap,words)
    systemlink = Vector{Vector{Int}}
    redwitness = Vector{String}
    version = output = conclusion = ""
    # s = lines(string(path,'/',file,".veripb"))
    version = "2.0" #split(s[1],' ')[end]
    c = length(system)
    nbctr = 0
    open(string(path,'/',file,".veripb"),"r"; lock = false) do f
        @time for ss in eachline(f)
            if ss[1:2] in ["p ","u ","ia","re","so"]
                nbctr+=1
                st = split(ss,' ')
                for v in st
                    if !(v in words) && !(tryparse(Int64,v) isa Number)
                        var = split(v,'~')[end]
                        if !(var in varmap)
                            push!(varmap,var)
                        end
                    end 
                end
            end
        end
        # @time nbctr = proofsize(f,varmap,words) + c
        nbctr +=c
    end
    open(string(path,'/',file,".veripb"),"r"; lock = false) do f
        system = vcat(system,Vector{Eq}(undef,nbctr-c))
        invsys = vcat(invsys,Vector{Vector{Int}}(undef,length(varmap)-length(invsys)))
        systemlink = Vector{Vector{Int}}(undef,nbctr)
        redwitness = Vector{String}(undef,nbctr)
        c+=1
        @time for ss in eachline(f)
            st = split(ss,' ')
            removespaces(st)
            eq = Eq([],0)
            if ss[1:2] == "u " || ss[1:3] == "rup"
                eq = readeq(st,varmap,2:2:length(st)-3)
                systemlink[c] = [-1]
            elseif ss[1:2] == "p " || ss[1:3] == "pol"
                systemlink[c] = [-2]
                eq = solvepol(st,system,systemlink[c])
            elseif ss[1:2] == "ia"
                systemlink[c] = [-3,parse(Int,st[2])]
                eq = readeq(st,varmap,4:2:length(st)-3)
            elseif ss[1:3] == "red"  
                systemlink[c] = [-4]
                eq = readred(st,varmap,redwitness,c)
            elseif ss[1:3] == "sol"                                  # on ajoute la negation au probleme pour chercher d'autres solutions. jusqua contradiction finale. dans la preuve c.est juste des contraintes pour casser toutes les soloutions trouvees
                systemlink[c] = [-5]
                eq = findfullassi(system,invsys,st,c,varmap)
            elseif st[1] == "output"
                output = st[2]
            elseif st[1] == "conclusion"
                conclusion = st[2]
            elseif !(ss[1:2] in ["# ","w ","ps","* ","f ","d ","de","co","en"])
                println("unknown: ",ss)
            end
            if length(eq.t)!=0 || eq.b!=0
                normcoefeq(eq)
                system[c] = eq
                addinvsys(invsys,eq,c)
                c+=1
            end
        end
    end
    return system,invsys,systemlink,redwitness,output,conclusion,version
end



#=

threads available:6
 10.853439 seconds (21.23 M allocations: 2.172 GiB, 5.59% gc time, 3.09% compilation time)
 23.658517 seconds (123.99 M allocations: 12.788 GiB, 12.22% gc time, 0.63% compilation time)
  4.287888 seconds (97 allocations: 204.312 KiB)
  9.784691 seconds (110.84 k allocations: 8.765 MiB, 1.57% compilation time)
  2.917663 seconds (102.22 k allocations: 7.627 MiB, 4.69% compilation time)
  4.836015 seconds (8.59 k allocations: 7.617 MiB, 1.70% compilation time)

  threads available:192
 17.662524 seconds (21.23 M allocations: 2.166 GiB, 7.46% gc time, 2.70% compilation time)
102.705816 seconds (1.32 G allocations: 136.473 GiB, 37.51% gc time, 57.83% compilation time)
  6.750308 seconds (97 allocations: 204.320 KiB)
 11.682530 seconds (120.48 k allocations: 20.205 MiB, 49.10% compilation time)
  4.158347 seconds (102.23 k allocations: 7.641 MiB, 4.53% compilation time)

threads available:1
bio096061   trim : 11.78 MB  ->  2.591 MB       4.471 s  ->  1.192 s      2.89 s
bio096061   trim : 11.78 MB  ->  2.591 MB       4.324 s  ->  1.177 s      2.791 s
bio096061   trim : 11.78 MB  ->  2.591 MB       4.262 s  ->  1.188 s      2.785 s
bio096061   trim : 11.78 MB  ->  2.591 MB       4.18 s  ->  1.276 s      2.786 s
bio096061   trim : 11.78 MB  ->  2.591 MB       4.578 s  ->  1.341 s      2.848 s
bio096061   trim : 11.78 MB  ->  2.591 MB       4.48 s  ->  1.395 s      2.932 s
bio096061   trim : 11.78 MB  ->  2.591 MB       4.584 s  ->  1.368 s      2.927 s
bio096061   trim : 11.78 MB  ->  2.591 MB       4.627 s  ->  1.429 s      3.087 s
bio096061   trim : 11.78 MB  ->  2.591 MB       5.025 s  ->  1.346 s      3.239 s
200.983978 seconds (206.94 M allocations: 70.214 GiB, 4.85% gc time, 0.39% compilation time)



threads available:12
bio096061   trim : 11.78 MB  ->  2.591 MB       9.49 s  ->  1.474 s      6.649 s
bio096061   trim : 11.78 MB  ->  2.591 MB       9.311 s  ->  2.87 s      6.53 s
bio096061   trim : 11.78 MB  ->  2.591 MB       9.578 s  ->  2.894 s      6.687 s
bio096061   trim : 11.78 MB  ->  2.591 MB       9.338 s  ->  3.275 s      6.675 s
bio096061   trim : 11.78 MB  ->  2.591 MB       9.351 s  ->  3.363 s      6.313 s
bio096061   trim : 11.78 MB  ->  2.591 MB       8.975 s  ->  3.496 s      6.864 s
bio096061   trim : 11.78 MB  ->  2.591 MB       9.07 s  ->  3.221 s      6.534 s
bio096061   trim : 11.78 MB  ->  2.591 MB       8.966 s  ->  2.862 s      6.7 s
bio096061   trim : 11.78 MB  ->  2.591 MB       9.251 s  ->  2.951 s      6.591 s
 86.292714 seconds (207.11 M allocations: 70.235 GiB, 17.97% gc time, 4.78% compilation time)


threads available:12
bio096061   trim : 11.78 MB  ->  2.591 MB       17.78 s  ->  4.364 s      3.253 s
bio096061   trim : 11.78 MB  ->  2.591 MB       21.96 s  ->  2.456 s      8.878 s
bio096061   trim : 11.78 MB  ->  2.591 MB       21.94 s  ->  3.951 s      8.87 s
bio096061   trim : 11.78 MB  ->  2.591 MB       21.94 s  ->  4.107 s      8.73 s
bio096061   trim : 11.78 MB  ->  2.591 MB       21.96 s  ->  4.567 s      8.874 s
bio096061   trim : 11.78 MB  ->  2.591 MB       21.94 s  ->  4.157 s      8.866 s
bio096061   trim : 11.78 MB  ->  2.591 MB       21.96 s  ->  4.205 s      8.893 s
bio096061   trim : 11.78 MB  ->  2.591 MB       21.96 s  ->  4.272 s      8.911 s
bio096061   trim : 11.78 MB  ->  2.591 MB       21.94 s  ->  4.385 s      8.866 s
bio096061   trim : 11.78 MB  ->  2.591 MB       21.96 s  ->  4.524 s      8.905 s
 56.580600 seconds (44.41 M allocations: 58.904 GiB, 2.68% gc time, 13.45% compilation time)

threads available:6
bio096061   trim : 11.78 MB  ->  2.591 MB       13.64 s  ->  3.452 s      6.17 s
bio096061   trim : 11.78 MB  ->  2.591 MB       13.09 s  ->  3.575 s      6.264 s
bio096061   trim : 11.78 MB  ->  2.591 MB       12.26 s  ->  3.448 s      6.311 s
bio096061   trim : 11.78 MB  ->  2.591 MB       12.94 s  ->  3.574 s      6.122 s
bio096061   trim : 11.78 MB  ->  2.591 MB       12.8 s  ->  3.848 s      6.347 s
bio096061   trim : 11.78 MB  ->  2.591 MB       13.87 s  ->  3.841 s      5.953 s
bio096061   trim : 11.78 MB  ->  2.591 MB       10.88 s  ->  2.614 s      5.127 s
bio096061   trim : 11.78 MB  ->  2.591 MB       9.874 s  ->  2.836 s      4.937 s
bio096061   trim : 11.78 MB  ->  2.591 MB       9.985 s  ->  2.724 s      4.919 s
bio096061   trim : 11.78 MB  ->  2.591 MB       9.973 s  ->  2.92 s      4.947 s
 61.665076 seconds (44.42 M allocations: 58.913 GiB, 2.41% gc time, 8.70% compilation time)


 =#


#=
bio171002        : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 3971|62092  init : 655   opb : 3778/3971 (95%)   pbp : 13543/62092 (22%)   time : 59.023 s
bio171002 (smol) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 5.852 MB  ->  880.8 KB       2.324 s  ->  11.08 s
del id

bio021002                : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 4255|73903  init : 761   opb : 3967/4255 (93%)   pbp : 10557/73903 (14%)   time : 20.965 s
bio021002 (smol)         : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 6.354 MB  ->  704.1 KB       3.073 s  ->  2.812 s
bio021002 (smol) & (del) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 6.354 MB  ->  814.0 KB       3.073 s  ->  1.725 s

bio037002                : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 2539|37522  init : 1095   opb : 2259/2539 (89%)   pbp : 8491/37522 (23%)   time : 64.39 s
bio037002 (smol)         : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 3.554 MB  ->  596.1 KB       1.843 s  ->  11.77 s
bio037002 (smol) & (del) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 3.554 MB  ->  669.4 KB       1.843 s  ->  2.562 s

bio063002                : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 4609|250361  init : 760   opb : 4271/4609 (93%)   pbp : 21695/250361 (9%)   time : 3.424 s
bio063002 (smol)         : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 17.26 MB  ->  1.387 MB       10.93 s  ->  1.176 s
bio063002 (smol) & (del) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 17.26 MB  ->  1.611 MB       10.93 s  ->  1.361 s

bio065002                : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 2729|33440  init : 432   opb : 2549/2729 (93%)   pbp : 6813/33440 (20%)   time : 18.321 s
bio065002 (smol)         : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 3.216 MB  ->  444.3 KB       1.333 s  ->  2.11 s
bio065002 (smol) & (del) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 3.216 MB  ->  505.7 KB       1.333 s  ->  1.344 s

bio171002                : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 3971|62092  init : 655   opb : 3778/3971 (95%)   pbp : 13543/62092 (22%)   time : 51.182 s
bio171002 (smol)         : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 5.852 MB  ->  880.8 KB       2.109 s  ->  12.56 s
bio171002 (smol) & (del) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 5.852 MB  ->  1.016 MB       2.109 s  ->  6.925 s




  0.077492 seconds (113 allocations: 7.125 KiB)
bio037002        : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 2539|37522  init : 1095   opb : 2259/2539 (89%)   pbp : 8491/37522 (23%)   time : 167.666 s
bio037002 (smol) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 3.554 MB  ->  666.8 KB       2.462 s  ->  4.129 s

  0.196476 seconds (113 allocations: 7.125 KiB)
bio041002        : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 4331|130077  init : 786   opb : 3438/4331 (79%)   pbp : 14438/130077 (11%)   time : 2.099 s
bio041002 (smol) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 9.438 MB  ->  1.118 MB       9.3 s  ->  1.272 s

  0.127089 seconds (113 allocations: 7.125 KiB)
bio046002        : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 4621|94361  init : 889   opb : 3965/4621 (86%)   pbp : 13661/94361 (14%)   time : 1.256 s
bio046002 (smol) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 7.714 MB  ->  1.012 MB       6.635 s  ->  0.6311 s

     0.205192 seconds (113 allocations: 7.125 KiB)
bio063002        : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 4609|250361  init : 760   opb : 4271/4609 (93%)   pbp : 21695/250361 (9%)   time : 4.19 s
bio063002 (smol) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 17.26 MB  ->  1.607 MB       17.4 s  ->  2.1 s
   
     0.105112 seconds (113 allocations: 7.125 KiB)
bio065002        : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 2729|33440  init : 432   opb : 2549/2729 (93%)   pbp : 6813/33440 (20%)   time : 44.615 s
bio065002 (smol) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 3.216 MB  ->  503.1 KB       2.199 s  ->  1.6 s

     0.184300 seconds (113 allocations: 7.125 KiB)
bio071002        : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 5765|163909  init : 989   opb : 4577/5765 (79%)   pbp : 21158/163909 (13%)   time : 2.659 s
bio071002 (smol) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 12.07 MB  ->  1.617 MB       12.62 s  ->  1.951 s

 0.113359 seconds (114 allocations: 7.422 KiB)
bio075002        : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 4425|166447  init : 697   opb : 3667/4425 (83%)   pbp : 14313/166447 (9%)   time : 1.642 s
bio075002 (smol) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 11.64 MB  ->  1.129 MB       10.51 s  ->  1.44 s

 0.174116 seconds (113 allocations: 7.125 KiB)
bio084002        : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 3287|107140  init : 704   opb : 3012/3287 (92%)   pbp : 18354/107140 (17%)   time : 1.395 s
bio084002 (smol) : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 7.293 MB  ->  1.302 MB       7.632 s  ->  1.554 s


   bio167002                : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   size : 2719|61630  init : 791   opb : 2600/2719 (96%)   pbp : 10301/61630 (17%)   time : 28.294 s
bio167002 (smol)         : Running VeriPB version 2.0.0.post221+git.487290
Verification succeeded.
   trim : 4.603 MB  ->  758.2 KB       2.598 s  ->  1.051 s
   =#


#=
   bio144093   trim : 1.101 MB  ->  115.5 KB       67.31 s  ->  0.08961 s      0.01088 s
   bio091033   trim : 12.41 MB  ->  740.6 KB       71.14 s  ->  0.7427 s      1.23 s
   bio096061   trim : 11.78 MB  ->  2.591 MB       141.7 s  ->  68.18 s      4.112 s
bio096061   trim : 11.78 MB  ->  2.591 MB       3.921 s  ->  1.137 s      2.739 s
bio096061   trim : 11.78 MB  ->  2.591 MB       5.5e-8 s  ->  5.3e-8 s      5.207 s 4t

bio035164   trim : 9.835 MB  ->  1.842 MB       64.34 s  ->  71.77 s      75600.0 s
bio097061   trim : 11.78 MB  ->  2.591 MB       71.41 s  ->  71.56 s      354.8 s

bio149094   trim : 969.6 KB  ->  90.24 KB       67.63 s  ->  0.08493 s      0.006856 s

try / scratch


   =#



#=



bio090002   trim : 492.0 KB  ->  123.7 KB       0.67 s  ->  0.3418 s      0.6188+0.02028+0.01902 s
bio101002   trim : 2.833 MB  ->  375.2 KB       6.35 s  ->  1.654 s      6.465+4.355+0.145 s
bio031002   trim : 3.178 MB  ->  556.3 KB       10.59 s  ->  2.784 s      17.42+0.7731+1.09 s
bio007002   trim : 6.438 MB  ->  817.1 KB       12.14 s  ->  2.686 s      19.38+1.987+2.015 s
bio143002   trim : 8.505 MB  ->  1.093 MB       17.94 s  ->  3.0 s      29.91+5.088+2.496 s
bio046002   trim : 7.714 MB  ->  1.017 MB       19.55 s  ->  3.556 s      30.16+3.41+2.662 s
bio008002   trim : 3.116 MB  ->  474.5 KB       8.534 s  ->  3.018 s      13.28+1.426+1.694 s
bio035002   trim : 5.298 MB  ->  887.0 KB       9.826 s  ->  3.192 s      17.22+2.829+4.149 s
bio107002   trim : 7.031 MB  ->  1.01 MB       16.71 s  ->  2.532 s      27.79+1.836+4.343 s
bio163002   trim : 9.476 MB  ->  1.063 MB       24.54 s  ->  3.306 s      41.83+2.103+3.198 s
bio053002   trim : 4.054 MB  ->  714.1 KB       7.45 s  ->  2.329 s      13.91+2.091+1.892 s
bio010002   trim : 3.525 MB  ->  662.5 KB       5.164 s  ->  2.224 s      13.42+2.195+0.8069 s
bio148002   trim : 5.41 MB  ->  1.203 MB       11.7 s  ->  4.007 s      19.83+2.608+5.732 s
bio017002   trim : 10.32 MB  ->  654.1 KB       32.04 s  ->  3.173 s      58.45+1.879+6.905 s
bio111002   trim : 9.39 MB  ->  1.373 MB       29.7 s  ->  5.325 s      55.44+5.188+8.885 s
bio108002   trim : 4.753 MB  ->  688.4 KB       11.77 s  ->  1.644 s      16.34+2.318+0.9639 s
bio167002   trim : 4.603 MB  ->  758.2 KB       11.39 s  ->  2.869 s      19.2+77.11+3.744 s
bio075002   trim : 11.64 MB  ->  1.133 MB       32.79 s  ->  2.469 s      71.23+3.763+6.683 s
bio055002   trim : 5.939 MB  ->  505.6 KB       11.29 s  ->  1.163 s      18.59+1.076+0.3047 s
bio091002   trim : 11.66 MB  ->  2.385 MB       34.1 s  ->  6.756 s      66.74+7.7+6.176 s
bio112002   trim : 3.869 MB  ->  451.2 KB       6.611 s  ->  1.321 s      13.48+8.259+0.3097 s
bio058002   trim : 3.837 MB  ->  726.5 KB       8.947 s  ->  2.303 s      14.79+0.9857+1.191 s
bio077002   trim : 2.697 MB  ->  452.2 KB       6.347 s  ->  1.459 s      9.405+21.17+0.1534 s
bio169002   trim : 8.974 MB  ->  597.9 KB       15.29 s  ->  2.028 s      25.0+1.594+2.634 s
bio092002   trim : 4.504 MB  ->  1.698 MB       12.45 s  ->  5.57 s      19.58+2.135+5.37 s
bio063002   trim : 17.26 MB  ->  1.611 MB       53.13 s  ->  5.152 s      95.64+8.374+8.098 s
bio079002   trim : 2.202 MB  ->  491.5 KB       2.652 s  ->  1.617 s      10.69+0.7005+0.5474 s
bio116002   trim : 7.09 MB  ->  991.1 KB       15.84 s  ->  2.541 s      30.39+1.628+1.146 s
bio021002   trim : 6.354 MB  ->  814.0 KB       10.66 s  ->  5.186 s      18.68+49.99+1.002 s
bio022002   trim : 382.1 KB  ->  61.2 KB       0.2837 s  ->  0.2093 s      0.1578+0.006199+0.007439 s
bio023002   trim : 415.8 KB  ->  74.28 KB       0.257 s  ->  0.1574 s      0.2245+0.00852+0.008756 s
bio120002   trim : 2.362 MB  ->  431.5 KB       4.447 s  ->  1.258 s      5.4+3.313+0.1352 s
bio080002   trim : 4.686 MB  ->  974.8 KB       11.02 s  ->  2.475 s      12.83+1.84+1.043 s


bio096061   trim : 11.78 MB  ->  2.591 MB       141.7 s  ->  68.18 s      4.112 s
bio096061   trim : 11.78 MB  ->  2.591 MB       3.921 s  ->  1.137 s      2.739 s
bio096061   trim : 11.78 MB  ->  2.591 MB       4.046 s  ->  1.422 s      7.871+2.942+1.057 s
julia>         @time testparse(path,file,1)
 17.011996 seconds (20.70 M allocations: 2.132 GiB, 6.73% gc time, 9.71% compilation time)
julia>         @time testparse(path,file,10)
 22.657625 seconds (206.64 M allocations: 21.333 GiB, 24.47% gc time)
julia>         @time testparse(path,file,32)
 37.965171 seconds (661.25 M allocations: 68.231 GiB, 35.41% gc time)
julia>         @time testparse(path,file,64)
 81.763286 seconds (1.32 G allocations: 136.444 GiB, 40.61% gc time)
julia>         @time testparse(path,file,192)
295.423247 seconds (3.97 G allocations: 409.409 GiB, 27.31% gc time)

julia>         @time testpara(path,file,extention,1)
  6.840462 seconds (140.03 k allocations: 9.787 MiB, 53.39% compilation time)
julia>         @time testpara(path,file,extention,32)
  7.377385 seconds (4.07 k allocations: 6.488 MiB)
julia>         @time testpara(path,file,extention,64)
  8.549569 seconds (7.13 k allocations: 11.942 MiB)
julia>         @time testpara(path,file,extention,192)
 18.348672 seconds (18.80 k allocations: 21.007 MiB)

  julia> @time testtrim(system,invsys,systemlink,nbopb,1)
  3.588706 seconds (990 allocations: 650.484 KiB)
julia> @time testtrim(system,invsys,systemlink,nbopb,10)
  3.684693 seconds (1.26 k allocations: 13.278 MiB)
julia>         @time testtrim(system,invsys,systemlink,nbopb,32)
  4.133111 seconds (2.27 k allocations: 67.544 MiB)
julia>         @time testtrim(system,invsys,systemlink,nbopb,64)
  5.028341 seconds (4.17 k allocations: 163.692 MiB)

  ramdisk
bio028002   trim : 463.3 KB  ->  77.96 KB       0.1658 s  ->  0.1338 s      0.1548+0.006754+0.2604 s
bio038002   trim : 424.4 KB  ->  104.4 KB       0.3408 s  ->  0.2184 s      0.2014+0.007979+0.05013 s
bio044002   trim : 2.525 MB  ->  472.5 KB       2.563 s  ->  1.343 s      4.859+1.307+0.3612 s
bio031002   trim : 3.178 MB  ->  556.3 KB       4.385 s  ->  1.906 s      14.91+0.7756+1.469 s
bio035002   trim : 5.298 MB  ->  887.0 KB       4.613 s  ->  1.863 s      13.41+2.276+1.55 s
bio007002   trim : 6.438 MB  ->  817.1 KB       6.434 s  ->  1.472 s      17.28+1.254+1.455 s
bio025002   trim : 4.968 MB  ->  1.63 MB       8.412 s  ->  4.341 s      21.35+2.492+2.702 s
bio008002   trim : 3.116 MB  ->  474.5 KB       4.718 s  ->  1.455 s      9.439+0.9916+0.9183 s
bio046002   trim : 7.714 MB  ->  1.017 MB       13.03 s  ->  2.362 s      21.91+2.805+2.006 s
bio041002   trim : 9.438 MB  ->  1.123 MB       17.76 s  ->  2.286 s      36.21+2.966+2.017 s
bio010002   trim : 3.525 MB  ->  662.5 KB       6.77 s  ->  1.003 s      9.906+1.944+0.7735 s
bio017002   trim : 10.32 MB  ->  654.1 KB       19.74 s  ->  1.285 s      43.44+1.146+1.647 s
bio021002   trim : 6.354 MB  ->  814.0 KB       7.358 s  ->  3.348 s      19.22+43.91+1.339 s
bio022002   trim : 382.1 KB  ->  61.2 KB       0.1652 s  ->  0.1063 s      0.1007+0.004035+0.00396 s
bio023002   trim : 415.8 KB  ->  74.28 KB       0.1607 s  ->  0.1234 s      0.2591+0.005265+0.004593 s
bio029002   trim : 10.17 MB  ->  664.6 KB       24.34 s  ->  1.018 s      49.3+1.633+1.324 s
bio026002   trim : 10.27 MB  ->  1.254 MB       19.31 s  ->  1.16 s      23.69+1.739+0.8301 s
bio027002   trim : 3.423 MB  ->  643.4 KB       3.394 s  ->  0.8598 s      6.116+0.4506+0.8279 s
bio037002   trim : 3.554 MB  ->  669.4 KB       4.83 s  ->  2.513 s      10.78+83.73+1.597 s


=#
function estimate(num_points)
    hits = 0
    for _ in 1:num_points
        x, y = rand(), rand()
        if x^2 + y^2 < 1.0
            hits += 1
        end
    end
    fraction = hits / num_points
    return 4 * fraction
end

estimate(100000000)


# path = proofs
# file = ins
# push!(system,Eq([],1))
# push!(systemlink,[-1])
println(tvp) # 102.958493292
println(tri) # 363.869743695
function test(n)
    @time a = zeros(Int,n)
    c = Vector{Int}()
    d = Deque{Int}()
    @time for i in 1:n
        a[i] = rand(Int) end
    @time b = [rand(Int) for i in 1:n]
    @time for i in 1:n
        pushfirst!(c,rand(Int)) end
    @time for i in 1:n
        pushfirst!(d,rand(Int)) end
    println("yo")
    e = div(n,2)
    flag = false
    @time for i in 1:n
        sortperm(b,alg =MergeSort)
    end
    @time for i in 1:n
        sortperm(b,alg = QuickSort)
    end
    @time for i in 1:n
        sortperm(b)
    end
    flag = false
    @time for i in 1:n
        sort(b)
end end
test(10_000)
function scorevarimpact(system,invsys,varmap) # inutile
    score = Vector{Int}(undef,length(system)-1)
    for i in eachindex(system)
        s = 0
        for l in system[i].t
            s += length(invsys[l.var])
        end
        if s!=0
            score[i] = s
        end
    end
    println(minimum(score)," ",sum(score)/length(score)," ",maximum(score))
    order = sortperm(score)
    return order
end



#= 
a = [2.2,1.3,1.5,5.1,2.4,2.6,4.9,2.0,6.9,1.9,2.0,1.5,5.3,1.1,3.5]
b = [11.7,5.9,6.9,26.4,13.1,13.7,19.7,2.8,31.6,9.6,10.1,7.7,24.6,5.7,15.4]
c = [a[i]/b[i] for i in eachindex(a)]
sum(c)/length(c)

a = [0.45,0.17,0.32,0.52,2.3,0.85,1.145,0.234,0.69,0.177,0.456,11.28,0.981,0.214,0.786]
b = [1.798,0.516,0.907,1.112,6.719,3.021,1.365,0.29,1.077,0.582,1.571,25.08,2.882,0.635,2.522]
c = [a[i]/b[i] for i in eachindex(a)]
sum(c)/length(c)

t = [
[7 , 6.438  , 693.9  , 2.158 , 0.267 , 0.436 , 0.375 , 3.93 ],
[8 , 3.116  , 406.8  , 1.309 , 0.245 , 0.346 , 0.078 , 2.155 ],
[10 , 3.525  , 565.4  , 1.499 , 0.345 , 0.686 , 0.094 , 2.484 ],
[17 , 10.32  , 576.8  , 5.11 , 0.376 , 0.514 , 0.302 , 10.45 ],
[21 , 6.354  , 704.1  , 2.569 , 2.533 , 20.26 , 0.147 , 4.388 ],
[22 , 382.1  , 61.0  , 0.066 , 0.049 , 0.003 , 0.002 , 0.059 ],
[23 , 415.8  , 73.81  , 0.073 , 0.051 , 0.004 , 0.003 , 0.063 ],
[25 , 4.968  , 1.364  , 3.097 , 0.83 , 0.995 , 0.228 , 5.484 ],
[26 , 10.27  , 1.081  , 5.329 , 0.601 , 1.126 , 0.293 , 9.986 ],
[27 , 3.423  , 553.1  , 2.223 , 0.375 , 0.235 , 0.088 , 4.178 ],
[28 , 463.3  , 77.49  , 0.083 , 0.056 , 0.004 , 0.003 , 0.087 ],
[29 , 10.17  , 582.8  , 6.596 , 0.392 , 0.68 , 0.242 , 13.93 ],
[31 , 3.178  , 480.0  , 2.0 , 0.346 , 0.178 , 0.126 , 3.601 ],
[35 , 5.298  , 757.7  , 2.076 , 0.37 , 0.679 , 0.207 , 3.216 ],
[37 , 3.554  , 596.1  , 1.594 , 12.28 , 65.52 , 0.149 , 2.53 ],
[38 , 424.4  , 101.7  , 0.155 , 0.077 , 0.006 , 0.005 , 0.146 ],
[41 , 9.438  , 965.9  , 5.444 , 0.545 , 1.028 , 0.25 , 9.723 ],
[44 , 2.525  , 402.8  , 1.2 , 0.241 , 0.452 , 0.109 , 1.819 ],
[46 , 7.714  , 863.2  , 3.42 , 0.402 , 0.81 , 0.325 , 6.565 ]
]
tt = [
[7 , 6.438  , 817.1  , 2.153 , 0.373 , 0.433 , 0.397 , 3.912 ],
[8 , 3.116  , 474.5  , 1.323 , 0.277 , 0.341 , 0.101 , 2.14 ],
[10 , 3.525  , 662.5  , 1.457 , 0.373 , 0.686 , 0.333 , 2.366 ],
[17 , 10.32  , 654.1  , 5.103 , 0.45 , 0.53 , 0.337 , 10.22 ],
[21 , 6.354  , 814.0  , 2.374 , 1.387 , 18.5 , 0.374 , 4.152 ],
[22 , 382.1  , 61.2  , 0.06 , 0.043 , 0.002 , 0.002 , 0.056 ],
[23 , 415.8  , 74.28  , 0.065 , 0.049 , 0.003 , 0.003 , 0.062 ],
[25 , 4.968  , 1.63  , 2.7 , 1.054 , 0.857 , 0.319 , 4.93 ],
[26 , 10.27  , 1.254  , 4.935 , 0.724 , 1.1 , 0.659 , 9.523 ],
[27 , 3.423  , 643.4  , 2.059 , 0.469 , 0.233 , 0.168 , 3.906 ],
[28 , 463.3  , 77.96  , 0.07 , 0.049 , 0.004 , 0.003 , 0.084 ],
[29 , 10.17  , 664.6  , 6.317 , 0.457 , 0.664 , 0.32 , 13.23 ],
[31 , 3.178  , 556.3  , 1.851 , 0.401 , 0.184 , 0.295 , 3.54 ],
[35 , 5.298  , 887.0  , 1.955 , 0.479 , 0.667 , 0.325 , 3.069 ],
[37 , 3.554  , 669.4  , 1.481 , 2.137 , 61.25 , 1.551 , 2.46 ],
[38 , 424.4  , 104.4  , 0.092 , 0.074 , 0.005 , 0.005 , 0.1 ],
[41 , 9.438  , 1.123  , 4.593 , 0.619 , 0.968 , 0.35 , 9.165 ],
[44 , 2.525  , 472.5  , 1.1 , 0.286 , 0.427 , 0.082 , 1.711 ],
[46 , 7.714  , 1.017  , 3.097 , 0.494 , 0.765 , 0.404 , 5.437 ]
]
ttt = [
[7 , 6.438  , 817.1  , 2.216 , 0.364 , 0.451 , 0.295 , 4.061 ],
[8 , 3.116  , 472.0  , 1.355 , 0.283 , 0.172 , 0.109 , 2.167 ],
[10 , 3.525  , 667.5  , 1.5 , 0.39 , 0.32 , 0.202 , 2.521 ],
[17 , 10.32  , 654.1  , 5.141 , 0.467 , 0.523 , 0.331 , 10.29 ],
[21 , 6.354  , 749.0  , 2.477 , 0.615 , 2.297 , 0.151 , 4.436 ],
[22 , 382.1  , 61.2  , 0.068 , 0.047 , 0.002 , 0.002 , 0.054 ],
[23 , 415.8  , 74.28  , 0.074 , 0.047 , 0.003 , 0.002 , 0.058 ],
[25 , 4.968  , 1.63  , 2.686 , 1.025 , 0.853 , 0.368 , 4.993 ],
[26 , 10.27  , 1.254  , 4.951 , 0.763 , 1.145 , 0.711 , 9.649 ],
[27 , 3.423  , 643.4  , 2.084 , 0.496 , 0.234 , 0.189 , 4.054 ],
[28 , 463.3  , 77.96  , 0.074 , 0.052 , 0.004 , 0.003 , 0.079 ],
[29 , 10.17  , 664.6  , 6.911 , 0.585 , 0.692 , 0.724 , 13.73 ],
[31 , 3.178  , 556.3  , 1.951 , 0.419 , 0.177 , 0.171 , 3.51 ],
[35 , 5.298  , 876.3  , 2.021 , 0.475 , 0.456 , 0.2 , 3.214 ],
[37 , 3.554  , 497.5  , 1.534 , 1.039 , 11.28 , 0.829 , 2.494 ],
[38 , 424.4  , 104.4  , 0.109 , 0.07 , 0.005 , 0.005 , 0.112 ],
[41 , 9.438  , 1.123  , 5.316 , 0.669 , 0.981 , 0.376 , 9.628 ],
[44 , 2.525  , 460.0  , 1.171 , 0.311 , 0.214 , 0.115 , 1.839 ],
[46 , 7.714  , 1.017  , 3.536 , 0.604 , 0.786 , 0.219 , 5.786 ]
]

t1 =  [i[4] for i in t]
t2 =  [i[5] for i in t]
t3 =  [i[5] for i in tt]
t4 =  [i[5] for i in ttt]

tall = sort([[t1[i],t2[i],t3[i],t4[i]] for i in 1:19])



function pr()
    println("\\foreach \\x/\\y in{")
for i in 1:19
    print(i,"/",tall[i][1],",")
end
println("} \\draw (\\x,\\y) node[noeudrou,fill opacity=0.75,scale=0.4] {};
\\foreach \\x/\\y in{")
for i in 1:19
    print(i,"/",tall[i][2],",")
end
println("} \\draw (\\x,\\y) node[noeudvio,fill opacity=0.75,scale=0.4] {};
\\foreach \\x/\\y in{")
for i in 1:19
    print(i,"/",tall[i][3],",")
end
println("} \\draw (\\x,\\y) node[noeudble,fill opacity=0.75,scale=0.4] {};
\\foreach \\x/\\y in{")
for i in 1:19
    print(i,"/",tall[i][4],",")
end
println("} \\draw (\\x,\\y) node[noeudver,fill opacity=0.75,scale=0.4] {};")
end
pr()

for i in 1:19
    # print(i,"/",t1[i],"/",t2[i],"/",t3[i],"/",t4[i],",")
end




veritimes = [i[4] for i in t]

tt = [i[] for i in t]
=#



#=
bio007030   trim : 6.786 MB  ->  875.3 KB       7.356 s  ->  1.119 s      14.4+1.5+0.6963 s
bio007030   trim : 6.786 MB  ->  875.3 KB       2.269 s  ->  0.3824 s      4.07+0.5586+0.2704 s

bio001061   trim : 14.8 MB  ->  5.055 MB       17.85 s  ->  5.494 s      32.46+10.84+4.102 s
bio001061   trim : 14.8 MB  ->  5.055 MB       5.553 s  ->  2.529 s      11.89+7.274+1.488 s
    benchs = "newSIPbenchmarks"
    solver = "glasgow-subgraph-solver/build/glasgow_subgraph_solver"
    proofs = "/cluster/proofs"
    extention = ".veripb"
    path = string(benchs,"/biochemicalReactions")
    cd()
    graphs = cd(readdir, path)
    println("threads available:",Threads.nthreads())
                pattern = "007.txt"
                target = "030.txt"
                # pattern = "096.txt"
                # target = "061.txt"
                # pattern = "144.txt"
                # target = "093.txt"
                ins = string("bio",pattern[1:end-4],target[1:end-4])
                path = proofs
                file = ins

  ssd
bio028002   trim : 463.3 KB  ->  77.96 KB       0.2903 s  ->  0.1396 s      0.2066+0.005378+0.2075 s
bio038002   trim : 424.4 KB  ->  104.4 KB       0.3132 s  ->  0.1612 s      0.2665+0.008237+0.1932 s
bio044002   trim : 2.525 MB  ->  472.5 KB       2.584 s  ->  1.426 s      4.221+1.303+0.4921 s
bio035002   trim : 5.298 MB  ->  887.0 KB       4.57 s  ->  1.88 s      13.22+1.848+1.13 s
bio031002   trim : 3.178 MB  ->  556.3 KB       4.349 s  ->  2.045 s      15.8+0.5555+0.881 s
bio007002   trim : 6.438 MB  ->  817.1 KB       5.393 s  ->  1.841 s      18.28+1.517+1.421 s
bio025002   trim : 4.968 MB  ->  1.63 MB       7.884 s  ->  3.977 s      21.91+2.671+2.528 s
bio008002   trim : 3.116 MB  ->  474.5 KB       4.394 s  ->  1.337 s      9.526+1.055+0.7747 s
bio046002   trim : 7.714 MB  ->  1.017 MB       13.89 s  ->  2.467 s      22.99+2.846+2.732 s
bio041002   trim : 9.438 MB  ->  1.123 MB       19.95 s  ->  2.153 s      36.65+3.272+2.093 s
bio010002   trim : 3.525 MB  ->  662.5 KB       6.96 s  ->  1.402 s      9.89+1.794+0.5124 s
bio017002   trim : 10.32 MB  ->  654.1 KB       20.86 s  ->  1.706 s      44.24+1.72+1.485 s
bio021002   trim : 6.354 MB  ->  814.0 KB       5.91 s  ->  3.703 s      20.47+45.02+1.192 s
bio022002   trim : 382.1 KB  ->  61.2 KB       0.1542 s  ->  0.08337 s      0.1218+0.003745+0.004114 s
bio023002   trim : 415.8 KB  ->  74.28 KB       0.3594 s  ->  0.1401 s      0.2128+0.006075+0.006485 s
bio029002   trim : 10.17 MB  ->  664.6 KB       24.78 s  ->  0.9442 s      49.28+1.413+1.339 s
bio026002   trim : 10.27 MB  ->  1.254 MB       19.88 s  ->  1.287 s      24.57+1.765+0.9253 s
bio027002   trim : 3.423 MB  ->  643.4 KB       3.263 s  ->  0.97 s      6.456+0.3612+0.4317 s
bio037002   trim : 3.554 MB  ->  669.4 KB       6.015 s  ->  2.496 s      10.89+83.47+1.642 s


bio007002   trim : 6.438 MB  ->  817.1 KB       3.647 s  ->  0.6417 s      7.713 = 6.533 + 0.8986+ 0.2809 s
bio008002   trim : 3.116 MB  ->  474.5 KB       2.251 s  ->  0.4742 s      5.155 = 3.805 + 1.035 + 0.3151 s
bio010002   trim : 3.525 MB  ->  662.5 KB       2.5   s  ->  0.6454 s      7.226 = 4.332 + 2.445 + 0.4482 s
bio017002   trim : 10.32 MB  ->  654.1 KB       8.43  s  ->  0.7137 s      19.43 = 17.73 + 1.155 + 0.5456 s
bio021002   trim : 6.354 MB  ->  814.0 KB       3.962 s  ->  2.08   s      37.39 = 6.727 + 30.25 + 0.4129 s
bio022002   trim : 382.1 KB  ->  61.2  KB       0.1009s  ->  0.07092s      0.1239= 0.1136+ 0.0030+ 0.007295 s
bio023002   trim : 415.8 KB  ->  74.28 KB       0.1089s  ->  0.07694s      0.1484= 0.1327+ 0.0045+ 0.01115 s
bio025002   trim : 4.968 MB  ->  1.63  MB       4.339 s  ->  1.707  s      10.47 = 7.885 + 1.798 + 0.7869 s
bio026002   trim : 10.27 MB  ->  1.254 MB       8.217 s  ->  1.202  s      18.9  = 15.87 + 2.287 + 0.7423 s
bio027002   trim : 3.423 MB  ->  643.4 KB       3.296 s  ->  0.7494 s      7.463 = 6.625 + 0.5081+ 0.3301 s
bio028002   trim : 463.3 KB  ->  77.96 KB       0.1121s  ->  0.08052s      0.1776= 0.1633+ 0.0047+ 0.009569 s
bio029002   trim : 10.17 MB  ->  664.6 KB       10.1  s  ->  0.7364 s      23.55 = 21.42 + 1.427 + 0.6992 s
bio031002   trim : 3.178 MB  ->  556.3 KB       3.027 s  ->  0.677  s      6.307 = 5.683 + 0.4019+ 0.2219 s
bio035002   trim : 5.298 MB  ->  887.0 KB       3.159 s  ->  0.7699 s      7.606 = 5.508 + 1.787 + 0.3116 s
bio037002   trim : 3.554 MB  ->  669.4 KB       2.362 s  ->  3.088  s      90.94 = 4.301 + 85.56 + 1.073 s
bio038002   trim : 424.4 KB  ->  104.4 KB       0.1603s  ->  0.1145 s      0.2062= 0.1887+ 0.0069+ 0.0106 s
bio041002   trim : 9.438 MB  ->  1.123 MB       7.449 s  ->  1.024  s      17.27 = 14.48 + 1.946 + 0.8386 s
bio044002   trim : 2.525 MB  ->  472.5 KB       1.738 s  ->  0.4716 s      4.077 = 2.809 + 1.045 + 0.224 s
bio046002   trim : 7.714 MB  ->  1.017 MB       4.983 s  ->  0.8245 s      10.35 = 8.42  + 1.464 + 0.4706 s


=#

function rup(i,init,rev,system,invsys,cone,front,que,assi,antecedants,type)
    eq = i==init ? rev : system[i]
    s = slack(eq,assi)
    if s<0
        antecedants[i] = true
    else
        r1,r2,r3 = updateprioquebit(eq,cone,front,que,invsys,s,i,assi,antecedants)
        if r1<i
            type = 1
            i = r1-1
        elseif r2<i
            type = 2
            i = r2-1
        else
            i = min(i,r3-1)
        end
    end
    que[i] = false
    i+=1
    if type == 1
        rupcone(i,init,rev,system,invsys,cone,front,que,assi,antecedants)
    elseif type == 2
        rupfront(i,init,rev,system,invsys,cone,front,que,assi,antecedants)
    else
        rupque(i,init,rev,system,invsys,cone,front,que,assi,antecedants)
    end
end
function rupcone(i,init,rev,system,invsys,cone,front,que,assi,antecedants)
    if i>init
        rupfront(1,init,rev,system,invsys,cone,front,que,assi,antecedants)
    else
        if que[i] && cone[i]
            rup(i,init,rev,system,invsys,cone,front,que,assi,antecedants,1)
        else
            rupcone(i+1,init,rev,system,invsys,cone,que,front,assi,antecedants)
        end
    end
end
function rupfront(i,init,rev,system,invsys,cone,front,que,assi,antecedants)
    if i>init
        rupque(1,init,rev,system,invsys,cone,front,assi,que,antecedants)
    else
        if que[i] && front[i]
            rup(i,init,rev,system,invsys,cone,front,que,assi,antecedants,2)
        else
            rupfront(i+1,init,rev,system,invsys,cone,front,que,assi,antecedants)
        end
    end
end
function rupque(i,init,rev,system,invsys,cone,front,que,assi,antecedants)
    if i>init
        printstyled(" rupQueRec empty "; color = :red)
    else
        if que[i]
            rup(i,init,rev,system,invsys,cone,front,que,assi,antecedants,1)
        else
            rupque(i+1,init,rev,system,invsys,cone,front,que,assi,antecedants)
        end
    end
end
function ruprec(system,invsys,antecedants,init,assi,front,cone)
    que = ones(Bool,init)
    rev = reverse(system[init])
    rupcone(1,init,rev,system,invsys,cone,front,que,assi,antecedants)
end

# cque = [31336, 31344, 31346, 31364, 18926, 31366, 1319, 31412, 31424, 21062, 31426, 21044, 31456, 31464, 31472, 31474, 31492, 24266, 31494, 1884, 31544, 31576, 31578, 31338, 31348, 18670, 31350, 18556, 18594, 18632, 31352, 18706, 31354, 1325, 31414, 31420, 20842, 31422, 20824, 31458, 31466, 31476, 24010, 31478, 23896, 23934, 2165, 31584, 31484, 31486, 31508, 24546, 31510, 1899, 707, 6887, 709, 6892, 31356, 31358, 31380, 19206, 31382, 1329, 142, 1412, 31600, 9472, 28538, 9477, 31602, 28520, 31636, 31638, 31670, 31368, 18978, 31370, 1323, 31428, 21114, 31430, 21088, 31496, 24318, 31498, 2168, 31580, 31480, 24046, 31482, 1893, 31540, 31582, 31488, 24230, 31490, 24092, 24138, 24184, 31516, 24650, 31518, 1896, 695, 6857, 697, 6862, 31360, 18890, 31362, 18752, 18798, 18844, 31388, 19310, 31390, 1327, 130, 1418, 31596, 9442, 28318, 9447, 31598, 28300, 31632, 31634, 31688, 31690, 31724, 31726, 31762, 31770, 31440, 21446, 31442, 21424, 31560, 2173, 31588, 31342, 31396, 31398, 31408, 19586, 31410, 1343, 31418, 31452, 21722, 31454, 21704, 31462, 31470, 31524, 31526, 31536, 24926, 31538, 1920, 31572, 31592, 31340, 31392, 19386, 31394, 19348, 19424, 19462, 31400, 19498, 31402, 1339, 31416, 31444, 21634, 31446, 21616, 31460, 31468, 31520, 24726, 31522, 24688, 24764, 24802, 2189, 31594, 31628, 29198, 31630, 29180, 31664, 31666, 31680, 731, 733, 751, 753, 824, 826, 844, 846, 31376, 31378, 1337, 166, 1420, 31616, 9532, 28922, 9537, 31618, 28900, 31652, 31654, 31708, 31710, 31744, 31746, 186, 1436, 31684, 31404, 19550, 31406, 1341, 31448, 21686, 31450, 21660, 31532, 24890, 31534, 2186, 31590, 31528, 24838, 31530, 1914, 31564, 2185, 31586, 440, 22410, 442, 22388, 31500, 31502, 1905, 723, 6927, 9277, 2175, 31608, 28818, 6462, 6932, 31610, 28796, 31644, 31646, 31692, 31694, 31700, 31702, 31728, 31730, 31736, 31738, 2269, 31768, 2404, 743, 6977, 745, 6982, 31372, 19070, 31374, 1321, 17815, 17830, 17875, 31720, 9582, 31722, 9587, 31756, 31758, 31774, 31504, 24502, 31506, 1887, 687, 3782, 4252, 6837, 9422, 689, 1743, 14527, 16642, 3787, 1647, 4257, 6842, 9427, 691, 3792, 4262, 6847, 9197, 2402, 13132, 14542, 16657, 9432, 20806, 1651, 31548, 2263, 31604, 28590, 31606, 28564, 31640, 31642, 31696, 31698, 31732, 31734, 2401, 1653, 4267, 1747, 6382, 6852, 9437, 735, 3902, 4372, 6957, 9542, 737, 1773, 14577, 15752, 16692, 31620, 2747, 1432, 31622, 9567, 29092, 9562, 31656, 31658, 31712, 31714, 31748, 31750, 29110, 3907, 1667, 4377, 6962, 9547, 2467, 739, 3912, 4382, 6967, 9552, 21598, 1669, 31568, 2281, 31624, 29162, 31626, 29136, 31660, 31662, 31716, 31718, 31752, 31754, 2410, 1671, 13177, 14587, 16702, 4387, 1774, 6502, 6972, 9557, 2166, 17345, 2182, 17405, 2260, 2276, 2353, 2361, 24364, 24410, 2179, 17395, 2273, 2406, 24456, 2400, 2408, 1333, 158, 1422, 9512, 1415, 1427, 1509, 2448, 2460, 9515, 19024, 19116, 19162, 1430, 2359, 2363, 1435, 2468, 19524, 2464, 2267, 2403, 2454, 2356, 2354, 1417, 2450, 18952, 2456, 2357, 31384, 2712, 3887, 4357, 9527, 21372, 22440, 31386, 1331, 10337, 11042, 432, 4322, 9492, 434, 1661, 12682, 654, 655, 4327, 9497, 436, 4332, 9502, 21298, 1663, 17857, 1301, 4337, 1666, 12692, 658, 659, 1765, 656, 5812, 9572, 657, 5817, 9577, 31512, 2707, 1334, 10325, 11032, 416, 4282, 9452, 418, 1657, 12672, 636, 637, 644, 645, 4287, 9457, 420, 4292, 4062, 1649, 12652, 626, 627, 628, 629, 640, 641, 642, 643, 650, 651, 652, 653, 714, 716, 718, 720, 1655, 12667, 630, 631, 648, 649, 12442, 539, 1759, 632, 5692, 633, 5697, 634, 5702, 9462, 635, 5707, 9467, 638, 5722, 9482, 639, 5727, 9487, 646, 5762, 5532, 5767, 1900, 792, 794, 2038, 1059, 8767, 1060, 8772, 796, 798, 2035, 1053, 8737, 1054, 8742, 804, 806, 2029, 14567, 13392, 808, 810, 2044, 1067, 8807, 1068, 8812, 1077, 8857, 1078, 8862, 812, 814, 2026, 1049, 8717, 1050, 8722, 1051, 8727, 1052, 8732, 1063, 1064, 1110, 1111, 2050, 1065, 1066, 1071, 8827, 1072, 8832, 1081, 8877, 1082, 8882, 1112, 1113, 820, 9522, 2459, 14557, 823, 7647, 2176, 15732, 15037, 1229, 1232, 2275, 16682, 17387, 31612, 28878, 31614, 28848, 31648, 31650, 31704, 31706, 31740, 31742, 17140, 17377, 6985, 8402, 6757, 2056, 1073, 8837, 1074, 8842, 1075, 8847, 1076, 8852, 1079, 8867, 1127, 8345, 8817, 8350, 8822, 8275, 8747, 8280, 8752, 8285, 8757, 8290, 8762, 8305, 8777, 8547, 8782, 32016, 33005, 1409, 27062, 1411, 27044, 2536, 2538, 33994, 1365, 26402, 1367, 26384, 2492, 2494, 34968, 1345, 1347, 96, 3717, 9357, 1349, 26146, 1351, 26032, 26070, 26108, 1545, 1548, 1551, 28282, 1554, 382, 384, 478, 28168, 28206, 28244, 2472, 2474, 2476, 2478, 36041, 1377, 1379, 1471, 1473, 1593, 1596, 396, 499, 2504, 2506, 2577, 3752, 4222, 9392, 2597, 3772, 4242, 9412, 37015, 1393, 1395, 1397, 26938, 1399, 120, 3777, 9417, 26824, 26862, 26900, 1405, 27026, 1407, 27000, 1617, 1620, 398, 1623, 29074, 1626, 28960, 28998, 29036, 2520, 2522, 2524, 2526, 2532, 2534, 38076, 1357, 1359, 1369, 26454, 1371, 100, 9367, 26428, 1385, 26742, 1387, 26712, 1451, 1453, 1563, 1566, 388, 487, 2484, 2486, 2496, 2498, 2512, 2514, 2562, 3737, 4207, 9377, 39065, 3, 53, 39559, 208, 30, 394, 2582, 4227, 9397, 39560, 1360, 1372, 26546, 1374, 26500, 1454, 1805, 1945, 2086, 2206, 2300, 2373, 2420, 2489, 2501, 2503, 5372, 6077, 1782, 1785, 613, 1788, 1791, 616, 7492, 2198, 30454, 2200, 30436, 2369, 2370, 1921, 1924, 848, 6782, 1928, 1931, 856, 2190, 2192, 2194, 30418, 2196, 1139, 2416, 2417, 8197, 8667, 30304, 30342, 30380, 2214, 30726, 2216, 1136, 2309, 2414, 2415, 2424, 2425, 8192, 2069, 2072, 8662, 2365, 2366, 2367, 2368, 2377, 2378, 2062, 2065, 1036, 1083, 27410, 27412, 27414, 27416, 9980, 10687, 18442, 25614, 106, 1476, 18447, 1276, 10030, 10507, 10037, 116, 1494, 18022, 18260, 1281, 39067, 2234, 31058, 2236, 31036, 2387, 2388, 2434, 2435, 40003, 7, 55, 5, 40031, 1, 52, 23, 25504, 25718, 25506, 25696, 39068, 40045, 25, 67, 27, 40051, 47, 40053, 492, 34, 620, 5632, 5387]
# length(cque) = 930
# sum(cque) = 12_408_975
# cdumb = [31336, 31338, 31340, 31342, 31344, 31346, 31348, 18670, 31350, 18556, 18594, 18632, 31352, 18706, 31354, 1325, 1419, 1515, 2452, 18688, 31356, 31358, 31360, 18890, 31362, 18752, 18798, 18844, 31364, 18926, 31366, 1319, 1413, 1506, 2446, 18908, 31368, 18978, 31370, 1323, 1417, 1512, 2450, 18952, 31372, 31374, 31376, 19162, 31378, 19024, 19070, 19116, 31380, 19206, 31382, 1329, 1423, 1521, 424, 426, 541, 544, 2456, 1294, 1295, 19184, 31384, 19266, 31386, 1331, 1425, 1524, 428, 430, 547, 550, 2458, 1296, 1297, 19236, 31388, 19310, 31390, 1327, 1421, 1518, 412, 414, 523, 526, 2454, 1288, 1289, 19288, 31392, 31394, 31396, 19462, 31398, 1321, 1415, 1509, 404, 406, 408, 410, 416, 418, 420, 422, 511, 514, 517, 520, 529, 532, 535, 538, 1647, 1651, 1653, 1741, 1747, 1750, 2448, 1284, 1285, 1286, 1287, 1290, 1291, 1292, 1293, 19348, 19386, 19424, 31400, 2752, 3927, 4397, 9567, 21616, 22684, 31402, 1333, 1339, 178, 1426, 1432, 1527, 440, 442, 565, 568, 1536, 1657, 1756, 636, 637, 706, 708, 2460, 1302, 1303, 2466, 1312, 31404, 2762, 3937, 4407, 9577, 21660, 22728, 31406, 1335, 1341, 182, 1428, 1434, 1530, 432, 434, 444, 446, 553, 556, 571, 574, 1539, 452, 454, 583, 586, 1659, 1661, 1667, 1759, 638, 639, 710, 712, 1762, 644, 645, 722, 724, 1771, 654, 655, 742, 744, 2462, 1298, 1299, 1304, 1305, 2468, 1308, 1309, 1314, 31408, 2772, 3947, 4417, 9587, 21704, 22772, 31410, 1337, 1343, 186, 1430, 1436, 1533, 436, 438, 448, 450, 559, 562, 577, 580, 1542, 456, 458, 589, 592, 1649, 1655, 1663, 1665, 1669, 1671, 1744, 626, 627, 628, 629, 632, 633, 686, 688, 690, 692, 698, 700, 1753, 630, 631, 634, 635, 694, 696, 702, 704, 1765, 640, 641, 646, 647, 714, 716, 726, 728, 1768, 642, 643, 648, 649, 718, 720, 730, 732, 1774, 650, 651, 656, 657, 734, 736, 746, 748, 1777, 652, 653, 658, 659, 738, 740, 750, 752, 1882, 1885, 1888, 780, 782, 900, 904, 1891, 784, 786, 908, 912, 1894, 788, 790, 916, 920, 1897, 800, 802, 940, 944, 1900, 792, 794, 796, 798, 804, 806, 924, 928, 932, 936, 948, 952, 1903, 816, 818, 972, 976, 1906, 808, 810, 820, 822, 956, 960, 980, 984, 1909, 812, 814, 824, 826, 964, 968, 988, 992, 1912, 836, 838, 1012, 1016, 1915, 828, 830, 840, 842, 996, 1000, 1020, 1024, 1918, 832, 834, 844, 846, 1004, 1008, 1028, 1032, 2023, 2026, 2029, 1049, 1050, 1096, 1097, 2032, 1051, 1052, 1098, 1099, 2035, 1053, 1054, 1100, 1101, 2038, 1059, 1060, 1106, 1107, 2041, 1055, 1056, 1057, 1058, 1061, 1062, 1102, 1103, 1104, 1105, 1108, 1109, 2044, 1067, 1068, 1114, 1115, 2047, 1063, 1064, 1069, 1070, 1110, 1111, 1116, 1117, 2050, 1065, 1066, 1071, 1072, 1112, 1113, 1118, 1119, 2053, 1077, 1078, 1124, 1125, 2056, 1073, 1074, 1079, 1080, 1120, 1121, 1126, 1127, 2059, 1075, 1076, 1081, 1082, 1122, 1123, 1128, 1129, 2164, 2166, 2168, 1169, 1172, 2170, 1175, 1178, 2172, 1181, 1184, 2174, 1199, 1202, 2176, 1187, 1190, 1193, 1196, 1205, 1208, 2178, 1223, 1226, 2180, 1211, 1214, 1229, 1232, 2182, 1217, 1220, 1235, 1238, 2184, 1253, 1256, 2186, 1241, 1244, 1259, 1262, 2188, 1247, 1250, 1265, 1268, 2258, 2260, 2262, 2264, 2266, 2268, 2270, 2272, 2274, 2276, 2278, 2280, 2282, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2464, 1300, 1301, 1306, 1307, 2470, 1310, 1311, 1316, 31412, 31414, 31416, 31418, 31456, 31458, 31460, 31462, 31464, 31466, 31468, 31470, 31596, 28318, 31598, 28300, 31600, 28538, 31602, 28520, 31604, 28590, 31606, 28564, 31608, 28818, 31610, 28796, 31612, 28878, 31614, 28848, 31616, 28922, 31618, 28900, 31620, 29110, 31622, 29092, 31624, 29162, 31626, 29136, 31628, 29198, 31630, 29180, 31632, 31634, 31636, 31638, 31640, 31642, 31644, 31646, 31648, 31650, 31652, 31654, 31656, 31658, 31660, 31662, 31664, 31666, 31688, 31690, 31692, 31694, 31696, 31698, 31700, 31702, 31704, 31706, 31708, 31710, 31712, 31714, 31716, 31718, 31720, 31722, 31724, 31726, 31728, 31730, 31732, 31734, 31736, 31738, 31740, 31742, 31744, 31746, 31748, 31750, 31752, 31754, 31756, 31758, 32016, 33005, 1409, 1411, 1503, 1505, 2536, 2538, 33994, 1365, 1367, 1459, 1461, 2492, 2494, 34968, 1345, 1347, 96, 1349, 1351, 1439, 1441, 1443, 1445, 1545, 1548, 378, 1551, 1554, 382, 384, 478, 2472, 2474, 1271, 2476, 2478, 28168, 28206, 28244, 28282, 36041, 1377, 1379, 1471, 1473, 1593, 1596, 396, 499, 2504, 2506, 2577, 2597, 3752, 3772, 4222, 4242, 9392, 9412, 37015, 1393, 1395, 1397, 1399, 120, 1405, 1407, 1487, 1489, 1491, 1493, 1499, 1501, 1617, 1620, 398, 1623, 1626, 402, 2520, 2522, 2524, 2526, 1283, 2532, 2534, 28960, 28998, 29036, 29074, 38076, 1357, 1359, 1369, 1371, 100, 1385, 1387, 1451, 1453, 1463, 1465, 1479, 1481, 1563, 1566, 388, 487, 2484, 2486, 2496, 2498, 1273, 2512, 2514, 2562, 3737, 4207, 9377, 39065, 3, 53, 1373, 1375, 112, 1381, 1383, 106, 1401, 1403, 116, 1467, 1469, 1474, 1476, 1494, 1496, 1587, 1590, 394, 496, 2500, 2502, 1279, 2508, 2510, 1276, 2528, 2530, 1281, 28636, 28682, 28728, 28774, 39067, 1805, 1808, 1945, 1948, 2086, 2089, 2198, 2200, 2206, 2208, 2234, 2236, 2292, 2294, 2300, 2302, 2328, 2330, 2369, 2370, 2373, 2374, 2387, 2388, 2416, 2417, 2420, 2421, 2434, 2435, 5372, 1787, 1790, 6077, 1782, 1785, 613, 1921, 1924, 848, 1927, 1930, 758, 856, 2062, 2065, 1036, 1083, 2068, 2071, 1038, 1085, 2190, 2192, 2194, 2196, 2214, 2216, 1136, 2284, 2286, 2288, 2290, 2308, 2310, 2365, 2366, 2367, 2368, 2377, 2378, 2414, 2415, 2424, 2425, 39559, 29, 71, 25252, 98, 108, 1454, 39560, 2489, 40003, 7, 55, 5, 1822, 1825, 620, 674, 1828, 1831, 621, 676, 1852, 1855, 623, 1858, 1861, 624, 625, 9, 54, 11, 60]
# length(cdumb) = 934
# sum(cdumb) = 6_932_430 

function update(eq,s,i,assi,antecedants)
    changes = false
    for l in eq.t
        if assi[l.var]==0 && l.coef > s
            assi[l.var] = l.sign ? 1 : 2
            antecedants[i] = true
            changes = true
        end
    end
    return changes
end
function updumb(system,assi,antecedants) 
    changes = true
    while changes
        changes = false
        i = 0
        while !changes && i<=length(system)
            i+=1
        # for i in eachindex(system)
            eq = system[i]
            s = slack(eq,assi)
            if s<0
                antecedants[i] = true
                return 
            else
                changes |= update(eq,s,i,assi,antecedants)
                if changes print(i,", ") end
            end
        end
    end
    printstyled(" updumb Failed "; color = :red)
end
function upque(system,invsys,assi,antecedants)
    que = Deque{Int}()
    for id in eachindex(system)
        pushfirst!(que,id) end
    while !isempty(que)
        i = pop!(que)
        eq = system[i]
        s = slack(eq,assi)
        if s<0
            antecedants[i] = true
            return 
        else
            ln = length(que)
            updateque(eq,que,invsys,s,i,assi,antecedants)
            if ln<length(que) print(i,", ") end
        end
    end
    printstyled(" upQue empty "; color = :red)
end

function updateque(eq,que,invsys,s,i,assi::Vector{Int8},antecedants)
    sset = SortedSet{Int}(Base.Order.Reverse)
    for l in eq.t
        if l.coef > s && assi[l.var]==0
            assi[l.var] = l.sign ? 1 : 2
            antecedants[i] = true
            for id in invsys[l.var]
                push!(sset,id)  
            end
        end
    end
    for i in sset
        push!(que,i)
    end
end
function fillprioque(invsys,l,init,cone,front,prioque,que)
    for id in invsys[l.var]
        if id<=init
            if cone[id] || front[id]
                pushfirst!(prioque,id)
            else
                pushfirst!(que,id)  
end end end end
function updateprioque(eq,prioque,que,invsys,cone,front,s,i,init,assi::Vector{Int8},antecedants)
    for l in eq.t
        if l.coef > s && assi[l.var]==0
            assi[l.var] = l.sign ? 1 : 2
            antecedants[i] = true
            fillprioque(invsys,l,init,cone,front,prioque,que)
end end end
function rupque(system::Vector{Eq},invsys,antecedants::Vector{Bool},init,assi::Vector{Int8},front::Vector{Bool},cone::Vector{Bool})
    que = Deque{Int}()
    prioque = Deque{Int}()
    for id in 1:init
        if id<=init
            pushfirst!(que,id) end end
    for i in que
        if cone[i] || front[i]
            pushfirst!(prioque,i) end end
    rev = reverse(system[init])
    while !isempty(prioque) || !isempty(que)
        i = !isempty(prioque) ? pop!(prioque) : pop!(que)
        eq = i==init ? rev : system[i]
        s = slack(eq,assi)
        if s<0
            antecedants[i] = true
            return 
        else
            updateprioque(eq,prioque,que,invsys,cone,front,s,i,init,assi,antecedants)
        end
    end
    printstyled(" rupQue empty "; color = :red)
end
function readrepartition()
    nb = 0
    cko = 0
    ckp = 0
    Σ = [0 for i in 1:101]
    cd()
    c = 1
    open(string(proofs,'/',"servarepartition"),"r"; lock = false) do f
        for ss in eachline(f)
            c+=1
            if ss!="" && ss[1] == 'b'
                st  = split(ss,' ')
                cko = parse(Int,st[end-1][2:end])
                ckp = parse(Int,st[end])
                c   = 1
            elseif ckp>1 && ckp<100 && c==3
                nb += 1
                st = split(ss,' ')
                i = 1
                for s in st
                    nbp = count('.',s)
                    if nbp>0
                        s = replace(s,'.'=>"")
                    end
                    if s!="" && i<102
                        Σ[i] += parse(Int,s)
                        i+=1
                    end
                    i+=nbp
                end
            end
        end
    end
    println(nb)
    t = Σ./nb
    for i in eachindex(t)
        print(string(i,'/',round(t[i]; sigdigits=4),','))
    end
    # return Σ./nb
end

function generate_biographs(k = 4)
    path = string(benchs,"/biochemicalReactions")
    cd()
    graphs = cd(readdir, path)
    for f in graphs
        print(f)
        g = ladtograph(path,f)
        delindividualist(g)
        draw(PNG(string(proofs,"/aimg/",f[1:3],".png"), 16cm, 16cm), gplot(g))
        gg = makegkwin(g,k)
        for i in 1:k
            g = gg[i]
            delindividualist(g)
            if nv(g)>1
            draw(PNG(string(proofs,"/aimg/",f[1:3],"-g",i,".png"), 16cm, 16cm), gplot(g))
        end end
    end
end

#=
function test()
    for i in 9500:length(t)
        print(prettytime(t[i][3]/10^6),"/",min(100,t[i][6]),",")
    end
    for i in 9500:length(t)
        print(prettytime(t[i][3]/10^6),"/",min(100,t[i][7]),",")
    end

    for i in 9500:length(t)
        print(prettytime(t[i][3]/10^6),"/",min(100,t[i][9]),",")
    end
    for i in 9500:length(t)
        print(prettytime(t[i][3]/10^6),"/",min(100,t[i][10]),",")
    end
    for i in 9500:length(t)
        print(prettytime(t[i][3]/10^6),"/",min(100,t[i][11]),",")
    end

    r =  9500:length(t)
    s = 0.0
    for i in r
        s+=t[i][8]
    end
    println(s/length(r))

    r =  9500:length(t)
    m = 0.0
    for i in r
        m=max(m,t[i][5])
    end
    println(m)

    r =  9500:length(t)
    m = 100.0
    for i in r
        m=min(m,t[i][5])
    end
    println(m)

    r =  9500:length(t)
    t5 = [t[i][5] for i in r]
    t8 = [t[i][8] for i in r]

    for i in r
        if t[i][8]>0.8
            printtabular([t[i]])
        end
    end

    for i in 9000:length(t)
        print(prettytime(t[i][3]/10^6),"/",prettypourcent(t[i][8]),",")
    end

    for i in 9000:length(t)
        print(prettytime(t[i][3]/10^6),"/",prettytime(t[i][4]/10^6),",")
    end

    for i in 9000:length(t)
        print(prettytime(t[i][3]/10^6),"/",prettytime(t[i][4]/10^6),",")
    end
end
=#


#=
de base
line 735: red -1 p1_pos0b0 -2 p1_pos0b1 -4 p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 8 f19 >= 1 ; f19 -> 1 ; begin
  ** proofgoals from formula **
  proofgoal 879: 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 8
  ** proofgoal from satisfying added constraint **
  proofgoal #1: 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 >= 0
  ** proofgoals from order **
  ** proofgoals from objective **
  ConstraintId 880: 8 ~f19 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 15
line 736:      proofgoal 879
  ConstraintId 881: 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 >= 7
line 737:      p -2 f19 w
  ConstraintId 882: 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 7
line 738: p 500 573 + s 646 + s 719 + s 774 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 883: 1 ~p0e0 1 p1e1 1 p1e2 1 p1e3 1 p1e4 1 p1e5 1 p2e1 1 p2e2 1 p2e3 1 p2e4 1 p2e5 1 ~p3e0 1 ~p4e0 1 ~p5e0 >= 5
line 739: u 1 ~p2e0 >= 1 ;
  ConstraintId 884: 1 ~p2e0 >= 1
line 740: p 427 573 + s 646 + s 719 + s 774 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 885: 1 ~p0e1 1 p1e0 1 p1e2 1 p1e3 1 p1e4 1 p1e5 1 p2e0 1 p2e2 1 p2e3 1 p2e4 1 p2e5 1 ~p3e1 1 ~p4e1 1 ~p5e1 >= 5
line 741: u 1 ~p2e1 >= 1 ;
  ConstraintId 886: 1 ~p2e1 >= 1
line 742: p 427 500 + s 646 + s 719 + s 774 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 887: 1 ~p0e2 1 p1e0 1 p1e1 1 p1e3 1 p1e4 1 p1e5 1 p2e0 1 p2e1 1 p2e3 1 p2e4 1 p2e5 1 ~p3e2 1 ~p4e2 1 ~p5e2 >= 5
line 743: u 1 ~p2e2 >= 1 ;
  ConstraintId 888: 1 ~p2e2 >= 1
line 744: p 427 500 + s 573 + s 719 + s 774 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 889: 1 ~p0e3 1 p1e0 1 p1e1 1 p1e2 1 p1e4 1 p1e5 1 p2e0 1 p2e1 1 p2e2 1 p2e4 1 p2e5 1 ~p3e3 1 ~p4e3 1 ~p5e3 >= 5
line 745: u 1 ~p2e3 >= 1 ;
  ConstraintId 890: 1 ~p2e3 >= 1
line 746: p 427 500 + s 573 + s 646 + s 774 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 891: 1 ~p0e4 1 p1e0 1 p1e1 1 p1e2 1 p1e3 1 p1e5 1 p2e0 1 p2e1 1 p2e2 1 p2e3 1 p2e5 1 ~p3e4 1 ~p4e4 1 ~p5e4 >= 5
line 747: u 1 ~p2e4 >= 1 ;
  ConstraintId 892: 1 ~p2e4 >= 1
line 748: p 427 500 + s 573 + s 646 + s 719 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 893: 1 ~p0e5 1 p1e0 1 p1e1 1 p1e2 1 p1e3 1 p1e4 1 p2e0 1 p2e1 1 p2e2 1 p2e3 1 p2e4 1 ~p3e5 1 ~p4e5 1 ~p5e5 >= 5
line 749: u 1 ~p2e5 >= 1 ;
  ConstraintId 894: 1 ~p2e5 >= 1
line 750: u >= 1 ;
  ConstraintId 895: >= 1
line 751:      end -1
  ConstraintId  - : deleting 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895
line 752: end
    automatically proved #1, constraint is trivial.
  ConstraintId 896: 8 f19 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 >= 8
  ConstraintId  - : deleting 880




  line 337: red 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 8 f19 >= 8 ; f19 1 ; begin
  ** proofgoals from formula **
  proofgoal 495: 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 8
  ** proofgoal from satisfying added constraint **
  proofgoal #1: 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 >= 0
  ** proofgoals from order **
  ** proofgoals from objective **
  ConstraintId 496: 8 ~f19 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 15
line 338:     proofgoal 495
  ConstraintId 497: 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 >= 7
line 339:     p 496 f19 w
  ConstraintId 498: 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 7
line 340:     p 286 317 + s 344 + s 372 + s 391 + s 407 + s 455 + s 471 + s 487 + s
  ConstraintId 499: 1 ~p0e0 1 p1e1 1 p1e2 1 p1e3 1 p1e4 1 p1e5 1 p2e1 1 p2e2 1 p2e3 1 p2e4 1 p2e5 1 ~p3e0 1 ~p4e0 1 ~p5e0 >= 5
line 341:     u 1 ~p2e0 >= 1 ;
  ConstraintId 500: 1 ~p2e0 >= 1
line 342:     p 254 317 + s 344 + s 372 + s 391 + s 407 + s 455 + s 471 + s 487 + s
  ConstraintId 501: 1 ~p0e1 1 p1e0 1 p1e2 1 p1e3 1 p1e4 1 p1e5 1 p2e0 1 p2e2 1 p2e3 1 p2e4 1 p2e5 1 ~p3e1 1 ~p4e1 1 ~p5e1 >= 5
line 343:     u 1 ~p2e1 >= 1 ;
  ConstraintId 502: 1 ~p2e1 >= 1
line 344:     p 254 286 + s 344 + s 372 + s 391 + s 407 + s 455 + s 471 + s 487 + s
  ConstraintId 503: 1 ~p0e2 1 p1e0 1 p1e1 1 p1e3 1 p1e4 1 p1e5 1 p2e0 1 p2e1 1 p2e3 1 p2e4 1 p2e5 1 ~p3e2 1 ~p4e2 1 ~p5e2 >= 5
line 345:     u 1 ~p2e2 >= 1 ;
  ConstraintId 504: 1 ~p2e2 >= 1
line 346:     p 254 286 + s 317 + s 372 + s 391 + s 407 + s 455 + s 471 + s 487 + s
  ConstraintId 505: 1 ~p0e3 1 p1e0 1 p1e1 1 p1e2 1 p1e4 1 p1e5 1 p2e0 1 p2e1 1 p2e2 1 p2e4 1 p2e5 1 ~p3e3 1 ~p4e3 1 ~p5e3 >= 5
line 347:     u 1 ~p2e3 >= 1 ;
  ConstraintId 506: 1 ~p2e3 >= 1
line 348:     p 254 286 + s 317 + s 344 + s 391 + s 407 + s 455 + s 471 + s 487 + s
  ConstraintId 507: 1 ~p0e4 1 p1e0 1 p1e1 1 p1e2 1 p1e3 1 p1e5 1 p2e0 1 p2e1 1 p2e2 1 p2e3 1 p2e5 1 ~p3e4 1 ~p4e4 1 ~p5e4 >= 5
line 349:     u 1 ~p2e4 >= 1 ;
  ConstraintId 508: 1 ~p2e4 >= 1
line 350:     p 254 286 + s 317 + s 344 + s 372 + s 407 + s 455 + s 471 + s 487 + s
  ConstraintId 509: 1 ~p0e5 1 p1e0 1 p1e1 1 p1e2 1 p1e3 1 p1e4 1 p2e0 1 p2e1 1 p2e2 1 p2e3 1 p2e4 1 ~p3e5 1 ~p4e5 1 ~p5e5 >= 5
line 351:     u 1 ~p2e5 >= 1 ;
  ConstraintId 510: 1 ~p2e5 >= 1
line 352:     u >= 1 ;
  ConstraintId 511: >= 1
line 353:     end -1
  ConstraintId  - : deleting 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511
line 354: end
    automatically proved #1, constraint is trivial.
  ConstraintId 512: 8 f19 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 >= 8
  ConstraintId  - : deleting 496





line 734: red 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 -1 p2_pos0b0 -2 p2_pos0b1 -4 p2_pos0b2 8 ~f19 >= 1 ; f19 -> 0 ;
  ** proofgoals from formula **
  ** proofgoal from satisfying added constraint **
  proofgoal #1: 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 0
  ** proofgoals from order **
  ** proofgoals from objective **
    automatically proved #1, constraint is trivial.
  ConstraintId 879: 8 ~f19 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 8


line 735: red -1 p1_pos0b0 -2 p1_pos0b1 -4 p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 8 f19 >= 1 ; f19 -> 1 ; begin
  ** proofgoals from formula **
  proofgoal 879: 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 8
  ** proofgoal from satisfying added constraint **
  proofgoal #1: 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 >= 0
  ** proofgoals from order **
  ** proofgoals from objective **
  ConstraintId 880: 8 ~f19 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 15
line 736:      proofgoal 879
  ConstraintId 881: 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 >= 7
line 737:      p -2 f19 w
  ConstraintId 882: 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 7
line 738: p 500 573 + s 646 + s 719 + s 774 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 883: 1 ~p0e0 1 p1e1 1 p1e2 1 p1e3 1 p1e4 1 p1e5 1 p2e1 1 p2e2 1 p2e3 1 p2e4 1 p2e5 1 ~p3e0 1 ~p4e0 1 ~p5e0 >= 5
line 739: u 1 ~p2e0 >= 1 ;
  ConstraintId 884: 1 ~p2e0 >= 1
line 740: p 427 573 + s 646 + s 719 + s 774 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 885: 1 ~p0e1 1 p1e0 1 p1e2 1 p1e3 1 p1e4 1 p1e5 1 p2e0 1 p2e2 1 p2e3 1 p2e4 1 p2e5 1 ~p3e1 1 ~p4e1 1 ~p5e1 >= 5
line 741: u 1 ~p2e1 >= 1 ;
  ConstraintId 886: 1 ~p2e1 >= 1
line 742: p 427 500 + s 646 + s 719 + s 774 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 887: 1 ~p0e2 1 p1e0 1 p1e1 1 p1e3 1 p1e4 1 p1e5 1 p2e0 1 p2e1 1 p2e3 1 p2e4 1 p2e5 1 ~p3e2 1 ~p4e2 1 ~p5e2 >= 5
line 743: u 1 ~p2e2 >= 1 ;
  ConstraintId 888: 1 ~p2e2 >= 1
line 744: p 427 500 + s 573 + s 719 + s 774 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 889: 1 ~p0e3 1 p1e0 1 p1e1 1 p1e2 1 p1e4 1 p1e5 1 p2e0 1 p2e1 1 p2e2 1 p2e4 1 p2e5 1 ~p3e3 1 ~p4e3 1 ~p5e3 >= 5
line 745: u 1 ~p2e3 >= 1 ;
  ConstraintId 890: 1 ~p2e3 >= 1
line 746: p 427 500 + s 573 + s 646 + s 774 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 891: 1 ~p0e4 1 p1e0 1 p1e1 1 p1e2 1 p1e3 1 p1e5 1 p2e0 1 p2e1 1 p2e2 1 p2e3 1 p2e5 1 ~p3e4 1 ~p4e4 1 ~p5e4 >= 5
line 747: u 1 ~p2e4 >= 1 ;
  ConstraintId 892: 1 ~p2e4 >= 1
line 748: p 427 500 + s 573 + s 646 + s 719 + s 790 + s 838 + s 854 + s 870 + s
  ConstraintId 893: 1 ~p0e5 1 p1e0 1 p1e1 1 p1e2 1 p1e3 1 p1e4 1 p2e0 1 p2e1 1 p2e2 1 p2e3 1 p2e4 1 ~p3e5 1 ~p4e5 1 ~p5e5 >= 5
line 749: u 1 ~p2e5 >= 1 ;
  ConstraintId 894: 1 ~p2e5 >= 1
line 750: u >= 1 ;
  ConstraintId 895: >= 1
line 751:      end -1
  ConstraintId  - : deleting 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895
line 752: end
    automatically proved #1, constraint is trivial.
  ConstraintId 896: 8 f19 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 >= 8
  ConstraintId  - : deleting 880



line 340: red 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 8 ~f19 >= 8 ; f19 0
  ** proofgoals from formula **
  ** proofgoal from satisfying added constraint **
  proofgoal #1: 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 0
  ** proofgoals from order **
  ** proofgoals from objective **
    automatically proved #1, constraint is trivial.
  ConstraintId 491: 8 ~f19 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 8


line 341: red 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 8 f19 >= 8 ; f19 1 ; begin
  ** proofgoals from formula **
  proofgoal 491: 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 8
  ** proofgoal from satisfying added constraint **
  proofgoal #1: 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 >= 0
  ** proofgoals from order **
  ** proofgoals from objective **
  ConstraintId 492: 8 ~f19 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 15
line 342:     proofgoal 491
  ConstraintId 493: 1 ~p1_pos0b0 2 ~p1_pos0b1 4 ~p1_pos0b2 1 p2_pos0b0 2 p2_pos0b1 4 p2_pos0b2 >= 7
line 343:     p 492 f19 w
  ConstraintId 494: 1 p1_pos0b0 2 p1_pos0b1 4 p1_pos0b2 1 ~p2_pos0b0 2 ~p2_pos0b1 4 ~p2_pos0b2 >= 7
line 344:     p 285 313 + s 340 + s 368 + s 387 + s 403 + s 451 + s 467 + s 483 + s
  ConstraintId 495: 1 ~p0e0 1 p1e1 1 p1e2 1 p1e3 1 p1e4 1 p1e5 1 p2e1 1 p2e2 1 p2e3 1 p2e4 1 p2e5 1 ~p3e0 1 ~p4e0 1 ~p5e0 >= 5
line 345:     u 1 ~p2e0 >= 1 ;
  ConstraintId 496: 1 ~p2e0 >= 1
line 346:     p 255 313 + s 340 + s 368 + s 387 + s 403 + s 451 + s 467 + s 483 + s
  ConstraintId 497: 1 ~p0e1 1 p1e0 1 p1e2 1 p1e3 1 p1e4 1 p1e5 1 p2e0 1 p2e2 1 p2e3 1 p2e4 1 p2e5 1 ~p3e1 1 ~p4e1 1 ~p5e1 >= 5
line 347:     u 1 ~p2e1 >= 1 ;
  ConstraintId 498: 1 ~p2e1 >= 1
line 348:     p 255 285 + s 340 + s 368 + s 387 + s 403 + s 451 + s 467 + s 483 + s
  ConstraintId 499: 1 ~p0e2 1 p1e0 1 p1e1 1 p1e3 1 p1e4 1 p1e5 1 p2e0 1 p2e1 1 p2e3 1 p2e4 1 p2e5 1 ~p3e2 1 ~p4e2 1 ~p5e2 >= 5
line 349:     u 1 ~p2e2 >= 1 ;



a = [[
[1 , 2 , 4 , 3 , 5 , 6 , 7],
[4 , 5 , 6 , 7],
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[5 , 6],
[1 , 3 , 2 , 4 , 5 , 6 , 7],
[],
[6],
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[1 , 2 , 3 , 4 , 5 , 6],
[],
[3 , 4 , 5 , 6 , 7],
[1 , 2 , 3 , 4 , 5 , 6]
],[
[1 , 2],
[7 , 2 , 3],
[1 , 2 , 3 , 7],
[],
[4 , 5 , 6 , 7],
[5 , 4 , 3 , 2 , 1 , 7],
[2 , 3 , 4 , 5],
[7 , 5 , 4 , 3 , 2 , 1],
[1 , 2 , 3 , 4 , 5],
[1 , 2 , 4 , 3 , 5],
[],
[],
[1 , 3 , 4 , 5]
],[
[1 , 2 , 3 , 4 , 6 , 5 , 7],
[4 , 5 , 6 , 7],
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[2],
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[2 , 3 , 5 , 6 , 7],
[1 , 2 , 4 , 3 , 5 , 6 , 7],
[1 , 2 , 3 , 4 , 5 , 6],
[1 , 2 , 3 , 4 , 6],
[],
[3 , 4 , 5 , 6 , 7],
[]
],[
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[5 , 7 , 4],
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[],
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[5 , 4 , 3 , 2 , 1],
[],
[6 , 7 , 2 , 1],
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[1 , 2 , 3 , 4 , 5],
[],
[3 , 4 , 5 , 6 , 7],
[]
],[
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[4 , 5 , 6],
[1 , 2 , 3 , 5 , 4 , 6 , 7],
[],
[1 , 2 , 3 , 4 , 5],
[4 , 3 , 2 , 1],
[1 , 2 , 4 , 3 , 5 , 6],
[1 , 2 , 3 , 4 , 5 , 6 , 7],
[1 , 2 , 3],
[1 , 2 , 3 , 4 , 5 , 6],
[],
[3 , 4 , 5 , 6 , 7],
[]]]

for w in a
    aa = zeros(Int,7)
    for p in w
        for j in p
            aa[j]+=1
        end
    end
    println(aa)
end

#=
[7, 7, 8, 9, 10, 11, 7]
[7, 8, 8, 7, 7, 1, 5]
[7, 9, 9, 9, 9, 10, 8]
[7, 7, 7, 8, 8, 6, 7]
[8, 8, 9, 9, 8, 7, 4]

   lundi 15 to 16 -> 11/13
   lundi 14 to 15 -> 10/13
mercredi 15 to 16 -> 10/13
=#

b = [
[2 , 1 , 3 , 4],
[2 , 3 , 4 , 1],
[1 , 2 , 3 , 4],
[4 , 3 , 2 , 1],
[1 , 2 , 3 , 4],
[4 , 3 , 2 , 1],
[3 , 2 , 1 , 4],
[1 , 2 , 3 , 4],
[1 , 2 , 3 , 4],
[1 , 2 , 3 , 4]
]

score = zeros(Int,4)
for p in b
    for i in eachindex(p)
        w = p[i]
        score[w]+=5-i
    end
end
println(score)

 # [28, 30, 25, 17]
 =#
 
#=
1
2
3
4
red ax>b begin
    5 p 3 + 4
    6 p 3 + 5
    del 3
    u >=1 
end
# del 5 6
7 p 2 + 4
del 2 4

succ[3] = 5
succ[4] = 5
succ[3] = 6
succ[5] = 6
succ[2] = 7
succ[4] = 7

succ = [[],[7],[5,6],[5,7],[6]]

=#

#= CHUFFED EVENTS ENCODINGS

EVENT_C = 1,		// Any change in the domain of the variable
EVENT_L = 2,		// Lower bound change of the variable
EVENT_U = 4,		// Upper bound change of the variable
EVENT_F = 8,		// When the variable is fixed
EVENT_LU = 6,		// Lower and upper bound change of the variable
EVENT_LF = 10,		// Lower bound change and fixation of the variable
EVENT_UF = 12		// Upper bound change and fixation of the variable
=#

~a=1-a



function updateprioquebitheap(eq,cone,front,que,que2,invsys,s,i,init,assi::Vector{Int8},antecedants)
    for l in eq.t
        if l.coef > s && assi[l.var]==0
            assi[l.var] = l.sign ? 1 : 2
            antecedants[i] = true
            for id in invsys[l.var]
                if id<=init && id!=i
                    if cone[id] || front[id]
                        ajoutas(que,id)
                    else
                        ajoutas(que2,id)
                    end
                end
            end
        end
    end
end
function rupheap(system,invsys,antecedants,init,assi,front,cone,prism,subrange)# I am putting back cone and front together because they will both end up in the cone at the end.
    que = Vector{Int}()             # create an empty min/max binary heap of prioque
    que2 = Vector{Int}()             # create an empty min/max binary heap of basic que
    for i in 1:init
        if front[i] !! cone[i]
            push!(que,i)
        else
            push!(que2,i)
        end
    end
    rev = reverse(system[init])
    prio = true
    while length(que)>0 || length(que2)>0
        i = length(que)>0 ? poptas(que) : poptas(que2)
        if !inprism(i,prism) || (i in subrange)
            eq = i==init ? rev : system[i]
            s = slack(eq,assi)
            if s<0
                antecedants[i] = true
                return true
            else
                updateprioquebitheap(eq,cone,front,que,que2,invsys,s,i,init,assi,antecedants)
            end
        end
    end
    return false
end


function ajoutas(t,e)           # heap implementation with uniqueness
    push!(t,e)
    i = length(t)
    while (p = i>>1) > 0 && e < t[p]
        t[i] = t[p]
        i = p
    end
    t[i] = e
end
function poptas(t)
    res = t[1]
    e = pop!(t)
    if e == res return res end
    t[1] = e
    i = 1
    n = length(t)
    while (g = i<<1) <= n
        f = (d = g|1) > n || t[g] < t[d] ? g : d
        t[f] < e || break
        t[i] = t[f]
        i = f
    end
    t[i] = e
    return res
end


# t = Vector{Int}()
# @time for e in 1600:-2:1
#     ajoutas(t,e)
# end
# @time for e in 3:3:16
#     ajoutas(t,e)
# end

# @time for i in 1:length(t)
#     print(poptas(t),' ')
# end


# 0 & 0 & 426.6 KB & 941.4 KB &   221   & 0.21 & 0.27 &   125   & 0.71 & 0.09 & 1.02 \\\hline # noheap
# 0 & 0 & 426.6 KB & 941.4 KB &   221   & 0.22 & 0.26 &   121   & 19.7 & 0.04 & 0.98 \\\hline # heap